{"version":3,"sources":["assets/ranktenlogo.png","config.js","api/RankApi.js","misc/PrefStore.js","api/Auth.js","reducers/UserReducer.js","Contexts.js","misc/AppTheme.js","components/Logo.js","routes/Splash.js","components/Login.js","components/SignUp.js","routes/LoginSignup.js","components/BackButton.js","components/UserPreviewCard.js","api/RankedListPreviewRepo.js","api/UserPreviewRepo.js","components/UserListDialog.js","components/ActionButton.js","api/UserRepo.js","components/ProfPicChooser.js","misc/Utils.js","components/SearchUsers.js","api/CommentRepo.js","reducers/RankedListReducer.js","api/RankedListRepo.js","components/RankItemCard.js","components/RankedListView.js","components/RankItemEdit.js","components/ErrorSnack.js","components/RankedListEdit.js","components/LoadingDialog.js","components/RankedListCard.js","components/CommentCard.js","components/CommentsDialog.js","components/UserInfo.js","components/GenericList.js","components/NewListButton.js","components/Profile.js","components/Discover.js","components/Feed.js","components/SearchLists.js","components/Settings.js","routes/MainRoute.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","get","endpoint","a","bearerToken","hasError","jsonResponse","parseResponse","fetchTimeout","method","headers","getHeaders","message","post","body","JSON","stringify","put","del","Accept","Authorization","response","json","parsed","status","Error","url","options","controller","AbortController","id","setTimeout","abort","fetch","signal","clearTimeout","getToken","localStorage","getItem","setMainTab","tab","setItem","clearStorage","removeItem","tokenValid","token","api","loginUser","username","password","e","res","sendUserInfo","signupUser","bio","error","jwtToken","clone","require","UserReducerTypes","userReducer","state","action","stateCopy","targetId","i","type","payload","user","profilePic","profPic","hasFollowed","following","push","numFollowing","length","splice","hasLiked","likedLists","commentLiked","likedComments","UserContext","createContext","ThemeContext","resetUserContext","userContext","loggedIn","setUserToken","userDispatch","appThemeConstants","getTextTheme","theme","fontFamily","color","palette","secondary","dark","getCardStyle","margin","alignSelf","boxShadow","shadows","borderRadius","Logo","props","src","alt","style","maxWidth","paddingTop","width","Splash","useState","startRoute","setStartRoute","currentTheme","useTheme","useContext","userToken","useEffect","console","log","userInfo","to","className","alignItems","minHeight","justifyContent","backgroundColor","background","default","fieldTheme","NameField","TextField","onKeyPress","event","key","onEnter","preventDefault","helperText","label","variant","onChange","PasswordField","visible","setVisible","errorMessage","autoComplete","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","AuthSubmit","loading","Button","marginTop","marginBottom","isLogin","AltAuth","textTheme","cursor","namePattern","RegExp","passwordPattern","userName","Login","nameError","setNameError","passwordError","setPasswordError","successfulLogin","setSuccess","setLoading","submitLogin","match","setAuthFail","prevState","failed","Card","CardContent","paddingBottom","target","value","setLogin","BioField","defaultValue","multiline","rows","SignUp","bioError","setBioError","submitSignup","LoginSignUp","authFail","handleClose","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","size","fontSize","BackButton","marginLeft","useStyles","makeStyles","avatar","height","avIcon","UserPreviewCard","history","useHistory","cardTheme","classes","padding","userId","Avatar","flexGrow","RankedListPreviewTypes","getRankedListPreview","params","refresh","getEndpoint","endpointBase","page","sort","query","getPagedResponse","replace","currentPage","lastPage","items","UserPreviewTypes","refreshQuery","getFollowing","getFollowers","getLikers","listId","searchUsers","UserListDialog","usersList","setUsersList","setRefresh","getUserList","getUsers","name","Dialog","aria-labelledby","overscrollBehaviorY","top","zIndex","marginRight","title","maxHeight","map","display","ActionButton","disabled","likeRes","followRes","getUser","deleteUser","changePassword","updateBio","updateProfilePic","followUser","includes","likeList","getLikeResponse","ProfilePicChooser","setError","setProfPic","onError","onLoad","months","SortOptions","SortMenu","anchor","setAnchor","onItemClick","onSort","currentTarget","Menu","anchorEl","keepMounted","Boolean","MenuItem","SearchUsers","userList","setUserList","hitMax","setHitMax","sortOption","flexWrap","likeComment","commentId","getUserComments","getComments","createComment","comment","editing","deleteComment","ListReducerTypes","updateParentProperties","rankItems","private","listTitle","rankedListReducer","p","isNew","rankedList","index","itemName","description","picture","arr","startIndex","endIndex","result","Array","from","removed","reOrder","ranking","priv","new","itemId","Math","floor","random","createRankedItem","rank","getRankedList","updateRankedList","deleteRankedList","RankItemInnerCard","cardStyle","paddingLeft","paddingRight","rankItem","whiteSpace","overflow","textOverflow","textAlign","isMain","onEdit","onDelete","RankItemCard","this","provided","draggableProps","dragHandleProps","ref","innerRef","React","Component","RankedListView","useReducer","rankedListDispatch","listNull","mainUser","timeStamp","dateCreated","isDark","full","rItem","numComments","numLikes","isLiked","RankItemEdit","pictureError","setPictureError","setPicture","setName","desc","setDesc","onSave","Alert","elevation","closeErrorSB","setOpen","ErrorSnack","severity","RankedListEdit","editTitle","setEditTitle","titleError","setTitleError","editItem","setEditItem","editIndex","setEditIndex","openEdit","setOpenEdit","openNew","setOpenNew","apiError","setApiError","validList","setValidList","beforeExit","onDragEnd","destination","source","droppableId","droppableProps","toString","draggableId","placeholder","LoadingDialog","success","executeTask","asyncTask","successMessage","ResultDisplay","CommentPreview","commentPreview","textDecoration","CardLikeBar","openLikers","setOpenLikers","openComments","setOpenComments","liked","setLiked","setNumLikes","onLike","likeStyle","userComments","RankItemPreview","CardHeader","secondTextTheme","date","Date","diffInMs","now","getTime","diffInDays","diffInHours","diffInMinutes","diffInSec","round","tsToDelta","RankedListCard","edited","setEdited","deleted","setDeleted","openList","setOpenList","savedList","setSavedList","deleteList","editList","onOpen","numItems","onUpdate","commentEdit","CommentLikeBar","CommentCard","setAnchorEl","setEditing","commentError","setCommentError","submitEdit","setSubmitEdit","deletedComment","setDeletedComment","delComment","editComment","toList","rList","onListNav","isList","commentContent","CommentsDialog","pageLoad","setPageLoad","commentsList","setCommentsList","setSort","setId","listOpen","setListOpen","editOpen","setEditOpen","commented","setCommented","commentEmpty","setCommentEmpty","sendComment","preSend","toId","pic","getCommentData","onPaginate","uComment","bottom","UserStat","stat","FollowButton","isFollowing","setFollowing","bioEdit","UserBio","getMonth","getDate","getFullYear","tsToDate","UserInfo","profPickerOpen","setProfPickerOpen","followersOpen","setFollowersOpen","followingOpen","setFollowingOpen","userCommentsOpen","setUserCommentsOpen","userStats","avatarSrc","rankPoints","onListClick","numLists","numFollowers","onLikeClick","userStat","GenericList","rankedLists","setRankedLists","breakPoints","isSmall","useMediaQuery","isLarge","getListPreviews","getParams","listType","dataLength","next","hasMore","loader","breakpointCols","columnClassName","emptyMessage","SortedListContainer","Number","getSort","noSort","saveSort","ListButton","withStyles","root","getContrastText","NewListButton","createNew","setCreateNew","saving","setSaving","closeEdit","createRankedList","Profile","otherUser","setOtherUser","errorState","setErrorState","displayLiked","setDisplayLiked","Discover","Feed","noFollowing","SearchLists","emptyMessages","Settings","oldPassword","setOldPassword","newPassword","setNewPassword","oldError","setOldError","newError","setNewError","savedPassword","setSavedPassword","setErrorMessage","resetPwdErrors","validatePassword","trySaving","drawer","breakpoints","up","flexShrink","appBar","menuButton","text","primary","spacing","toolbar","mixins","drawerPaper","content","listItem","searchQuery","MainRoute","window","setTheme","container","undefined","document","mobileOpen","setMobileOpen","mainTab","getMainTab","tabIndex","setTabIndex","themeSwitch","setThemeSwitch","searchLists","setSearchLists","menuAnchor","setMenuAnchor","settings","openSettings","searchItemClicked","listSelected","selectedColor","unselectedColor","linkStyle","iconColor","handleDrawerToggle","List","ListItem","button","ListItemIcon","ListItemText","FormControlLabel","control","checked","newTheme","CssBaseline","AppBar","Toolbar","edge","justifySelf","Hidden","smUp","implementation","Drawer","paper","ModalProps","xsDown","path","component","exact","render","routerProps","renderOtherProfile","appThemeLight","main","light","appThemeDark","App","getCurrentTheme","userValue","useMemo","themeValue","darkTheme","createMuiTheme","lightTheme","Provider","ThemeProvider","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f40ad684.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ranktenlogo.6a7b3d01.png\";","//export const baseUrl = \"http://localhost:3000\";\r\nexport const baseUrl = \"https://rankten-express.herokuapp.com\";","import { baseUrl } from \"../config\";\r\n\r\nexport async function validateImage(imageUrl) {\r\n    var isValid = false;\r\n    try {\r\n        var response = await fetchTimeout(imageUrl);\r\n        console.log(response.headers);\r\n        isValid = response.ok && response.headers[\"Content-Type\"].includes(\"image\");\r\n    } catch (e) {\r\n        console.log(e);\r\n        return false;\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nexport async function get(endpoint, bearerToken = \"\") {\r\n    var hasError = false;\r\n    var jsonResponse = null;\r\n\r\n    try {\r\n        jsonResponse = await parseResponse(\r\n            await fetchTimeout(baseUrl + endpoint, {\r\n                method: \"GET\",\r\n                headers: getHeaders(bearerToken),\r\n            })\r\n        );\r\n    } catch (e) {\r\n        hasError = true;\r\n        jsonResponse = e.message;\r\n    }\r\n\r\n    return [hasError, jsonResponse];\r\n}\r\n\r\nexport async function post(endpoint, bearerToken = \"\", body = {}) {\r\n    var hasError = false;\r\n    var jsonResponse = null;\r\n\r\n    try {\r\n        jsonResponse = await parseResponse(\r\n            await fetchTimeout(baseUrl + endpoint, {\r\n                method: \"POST\",\r\n                body: JSON.stringify(body),\r\n                headers: getHeaders(bearerToken),\r\n            })\r\n        );\r\n    } catch (e) {\r\n        hasError = true;\r\n        jsonResponse = e.message;\r\n    }\r\n\r\n    return [hasError, jsonResponse];\r\n}\r\n\r\nexport async function put(endpoint, bearerToken = \"\", body = {}) {\r\n    var hasError = false;\r\n    var jsonResponse = null;\r\n\r\n    try {\r\n        jsonResponse = await parseResponse(\r\n            await fetchTimeout(baseUrl + endpoint, {\r\n                method: \"PUT\",\r\n                body: JSON.stringify(body),\r\n                headers: getHeaders(bearerToken),\r\n            })\r\n        );\r\n    } catch (e) {\r\n        hasError = true;\r\n        jsonResponse = e.message;\r\n    }\r\n\r\n    return [hasError, jsonResponse];\r\n}\r\n\r\nexport async function del(endpoint, bearerToken = \"\") {\r\n    var hasError = false;\r\n    var jsonResponse;\r\n\r\n    try {\r\n        jsonResponse = await parseResponse(\r\n            await fetchTimeout(baseUrl + endpoint, {\r\n                method: \"DELETE\",\r\n                headers: getHeaders(bearerToken),\r\n            })\r\n        );\r\n    } catch (e) {\r\n        hasError = true;\r\n        jsonResponse = e.message;\r\n    }\r\n\r\n    return [hasError, jsonResponse];\r\n}\r\n\r\nfunction getHeaders(bearerToken = \"\") {\r\n    return bearerToken === \"\"\r\n        ? {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          }\r\n        : {\r\n              Authorization: `Bearer ${bearerToken}`,\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          };\r\n}\r\n\r\nasync function parseResponse(response) {\r\n    var parsed = await response.json();\r\n    if(response.status == 200) {\r\n        return parsed;\r\n    } else {\r\n        throw new Error(parsed.message);\r\n    }\r\n}\r\n\r\nasync function fetchTimeout(url, options) {\r\n\r\n    const controller = new AbortController();\r\n    const id = setTimeout(() => controller.abort(), 6000);\r\n\r\n    const response = await fetch(url, {\r\n        ...options,\r\n        signal: controller.signal,\r\n    });\r\n    clearTimeout(id);\r\n\r\n    return response;\r\n}\r\n","const CURRENT_THEME = \"CURRENT_THEME\";\r\nconst JWT_TOKEN = \"JWTTOKEN\";\r\nconst USER_NAME_KEY = \"USERNAME\";\r\nconst PASSWORD_KEY = \"PASSWORD\";\r\nconst MAIN_TAB = \"MAINTAB\";\r\nconst SAVED_SORT = \"SAVEDSORT\"\r\n\r\nexport function saveTheme(value) {\r\n    localStorage.setItem(CURRENT_THEME, value);\r\n}\r\n\r\nexport function saveToken(token) {\r\n    localStorage.setItem(JWT_TOKEN, token);\r\n}\r\n\r\nexport function getCurrentTheme() {\r\n    var theme = localStorage.getItem(CURRENT_THEME);\r\n    return theme ? theme : \"light\";\r\n}\r\n\r\nexport function getToken() {\r\n    var token = localStorage.getItem(JWT_TOKEN);\r\n    return token;\r\n}\r\n\r\nexport function getLogin() {\r\n    var userName = localStorage.getItem(USER_NAME_KEY);\r\n    var password = localStorage.getItem(PASSWORD_KEY);\r\n\r\n    return [userName, password];\r\n}\r\n\r\nexport function setMainTab(tab) {\r\n    localStorage.setItem(MAIN_TAB, tab);\r\n}\r\n\r\nexport function getMainTab() {\r\n    var mainTab = localStorage.getItem(MAIN_TAB);\r\n    return mainTab ? Number(mainTab) : 0;\r\n}\r\n\r\nexport function saveSort(sort) {\r\n    localStorage.setItem(SAVED_SORT, sort);\r\n}\r\n\r\nexport function getSort() {\r\n    var sort = localStorage.getItem(SAVED_SORT);\r\n    return sort ? Number(sort) : 0;\r\n}\r\n\r\nexport function clearStorage() {\r\n    localStorage.removeItem(USER_NAME_KEY);\r\n    localStorage.removeItem(PASSWORD_KEY);\r\n    localStorage.removeItem(JWT_TOKEN);\r\n}\r\n","import * as api from \"./RankApi\";\r\nimport { saveToken } from \"../misc/PrefStore\";\r\n\r\nexport const tokenValid = async (token) => await api.post(\"/validate_token\", token);\r\n\r\nexport async function loginUser(username, password) {\r\n    const [e, res] = await api.post(\"/login\", \"\", { username: username, password: password });\r\n    return sendUserInfo(e, res);\r\n}\r\n\r\nexport async function signupUser(username, password, bio) {\r\n    const [e, res] = await api.post(\"/signup\", \"\", { username: username, password: password, bio: bio });\r\n    return sendUserInfo(e, res);\r\n}\r\n\r\nfunction sendUserInfo(error, response) {\r\n    if (error) {\r\n        return [error, response];\r\n    } else {\r\n        saveToken(response.jwtToken);\r\n        return [error, response];\r\n    }\r\n}\r\n","const clone = require(\"rfdc\")();\r\n\r\nexport const UserReducerTypes = {\r\n    getUserAction: \"GET_USER_ACTION\",\r\n    updateBioAction: \"UPDATE_BIO_ACTION\",\r\n    updateProfilePicAction: \"UPDATE_PROFILE_PIC_ACTION\",\r\n    followUserAction: \"FOLLOW_USER_ACTION\",\r\n    likeListAction: \"LIKE_LIST_ACTION\",\r\n    likeCommentAction: \"LIKE_COMMENT_ACTION\",\r\n};\r\n\r\nexport function userReducer(state, action) {\r\n    var stateCopy = {};\r\n    var targetId = {};\r\n    var i = 0;\r\n    switch (action.type) {\r\n        //{user: object}\r\n        case UserReducerTypes.getUserAction:\r\n            return { ...state, ...clone(action.payload.user) };\r\n        //{bio: string}\r\n        case UserReducerTypes.updateBioAction:\r\n            stateCopy = clone(state);\r\n            stateCopy.bio = action.payload.bio;\r\n            return stateCopy;\r\n        //{profPic: string}\r\n        case UserReducerTypes.updateProfilePicAction:\r\n            stateCopy = clone(state);\r\n            stateCopy.profilePic = action.payload.profPic;\r\n            return stateCopy;\r\n        //{hasFollowed: bool, targetId: objectId}\r\n        case UserReducerTypes.followUserAction:\r\n            stateCopy = clone(state);\r\n            const hasFollowed = action.payload.hasFollowed;\r\n            targetId = action.payload.targetId;\r\n\r\n            if (hasFollowed) {\r\n                stateCopy.following.push(targetId);\r\n                stateCopy.numFollowing += 1;\r\n            } else {\r\n                for (i = 0; i < stateCopy.following.length; i++) {\r\n                    if (stateCopy.following[i] === targetId) {\r\n                        stateCopy.following.splice(i, 1);\r\n                        stateCopy.numFollowing -= 1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return stateCopy;\r\n        //{hasLiked: bool, targetId: objectId}\r\n        case UserReducerTypes.likeListAction:\r\n            stateCopy = clone(state);\r\n            const hasLiked = action.payload.hasLiked;\r\n            targetId = action.payload.targetId;\r\n\r\n            if (hasLiked) {\r\n                stateCopy.likedLists.push(targetId);\r\n            } else {\r\n                for (i = 0; i < stateCopy.likedLists.length; i++) {\r\n                    if (stateCopy.likedLists[i] === targetId) {\r\n                        stateCopy.likedLists.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return stateCopy;\r\n        //{hasLiked: bool, targetId: objectId}\r\n        case UserReducerTypes.likeCommentAction:\r\n            stateCopy = clone(state);\r\n            const commentLiked = action.payload.hasLiked;\r\n            targetId = action.payload.targetId;\r\n\r\n            if (commentLiked) {\r\n                stateCopy.likedComments.push(targetId);\r\n            } else {\r\n                for (i = 0; i < stateCopy.likedComments.length; i++) {\r\n                    if (stateCopy.likedComments[i] === targetId) {\r\n                        stateCopy.likedComments.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nimport { tokenValid } from \"./api/Auth\";\r\nimport { getToken } from \"./misc/PrefStore\";\r\nimport { UserReducerTypes } from \"./reducers/UserReducer\";\r\n\r\nexport const UserContext = createContext(null);\r\nexport const ThemeContext = createContext(\"light\");\r\n\r\nexport const resetUserContext = async (userContext) => {\r\n    const [e, loggedIn] = await tokenValid(getToken());\r\n    if (e) {\r\n        await resetUserContext(userContext);\r\n    } else {\r\n        userContext.setUserToken(getToken());\r\n        userContext.userDispatch({ type: UserReducerTypes.getUserAction, payload: { user: loggedIn } });\r\n    }\r\n};\r\n","export const appThemeConstants = {\r\n    palePurple: \"#f1e3f3\",\r\n    lavender: \"#c2bbf0\",\r\n    darkSienna: \"#4a051c\",\r\n    hanPurple: \"#6320ee\",\r\n    paraPink: \"#ef476f\",\r\n    fontFamily: \"'Nunito', sans-serif\",\r\n};\r\n\r\nexport const getTextTheme = (theme) => {\r\n    return {\r\n        fontFamily: appThemeConstants.fontFamily,\r\n        color: theme.palette.secondary.dark,\r\n    };\r\n};\r\n\r\nexport const getCardStyle = (theme) => {\r\n    return {\r\n        margin: \"10px\",\r\n        alignSelf: \"center\",\r\n        boxShadow: theme.shadows[4],\r\n        borderRadius: \"10px\",\r\n    };\r\n};\r\n","import React from \"react\";\r\n\r\n//width: string\r\nexport const Logo = (props) => {\r\n    return (\r\n        <img\r\n            src={require(\"../assets/ranktenlogo.png\")}\r\n            alt=\"Rank Ten logo\"\r\n            style={{ maxWidth: \"80%\", alignSelf: \"center\", paddingTop: \"10px\" }}\r\n            width={`${props.width}px`}\r\n        />\r\n    );\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useTheme } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport { Logo } from \"../components/Logo\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport { UserContext } from \"../Contexts\";\r\nimport { tokenValid } from \"../api/Auth\";\r\nimport \"../App.css\";\r\n\r\nexport const Splash = () => {\r\n    const [startRoute, setStartRoute] = useState(null);\r\n    const currentTheme = useTheme();\r\n    const { userDispatch, userToken } = useContext(UserContext);\r\n    useEffect(() => {\r\n        console.log(\"called splash\");\r\n\r\n        if (userToken) {\r\n            console.log(userToken);\r\n            (async () => {\r\n                const [hasError, userInfo] = await tokenValid(userToken);\r\n                if (hasError) {\r\n                    setStartRoute(\"/auth\");\r\n                } else {\r\n                    //set user object?\r\n                    userDispatch({ type: UserReducerTypes.getUserAction, payload: { user: userInfo } });\r\n                    //set home?\r\n                    setStartRoute(\"/main\");\r\n                }\r\n            })();\r\n        } else {\r\n            setStartRoute(\"/auth\");\r\n        }\r\n    }, [setStartRoute, userDispatch, userToken]);\r\n\r\n    if (startRoute) {\r\n        return <Redirect to={startRoute} />;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"col\"\r\n            style={{\r\n                alignItems: \"center\",\r\n                minHeight: \"100vh\",\r\n                justifyContent: \"space-around\",\r\n                backgroundColor: currentTheme.palette.background.default,\r\n            }}\r\n        >\r\n            <Logo width=\"600\" />\r\n            <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Button, Card, CardContent, useTheme, TextField, InputAdornment, IconButton } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\n\r\nimport { UserContext } from \"../Contexts\";\r\nimport { appThemeConstants, getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport { loginUser } from \"../api/Auth\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport \"../App.css\";\r\n\r\nexport const fieldTheme = {\r\n    color: appThemeConstants.lavender,\r\n    width: \"90%\",\r\n    borderRadius: \"15px\",\r\n    margin: \"10px\",\r\n};\r\n\r\n//error: bool\r\n//onChange: callback\r\nexport const NameField = (props) => {\r\n    return (\r\n        <TextField\r\n            onKeyPress={(event) => {\r\n                if (event.key === \"Enter\") {\r\n                    props.onEnter();\r\n                    event.preventDefault();\r\n                }\r\n            }}\r\n            error={props.error}\r\n            helperText={props.error ? \"Name needs 3-15 characters\" : \"\"}\r\n            style={fieldTheme}\r\n            id=\"name-field\"\r\n            label=\"User Name\"\r\n            variant=\"outlined\"\r\n            onChange={props.onChange}\r\n        />\r\n    );\r\n};\r\n\r\n//error: bool\r\n//onChange: callback\r\n//label: string\r\n//errorMessage: string\r\nexport const PasswordField = (props) => {\r\n    const [visible, setVisible] = useState(false);\r\n    const errorMessage = props.errorMessage ? props.errorMessage : \"Password needs 6-20 characters\";\r\n    const label = props.label ? props.label : \"Password\";\r\n    return (\r\n        <TextField\r\n            error={props.error}\r\n            onKeyPress={(event) => {\r\n                if (event.key === \"Enter\") {\r\n                    props.onEnter();\r\n                    event.preventDefault();\r\n                }\r\n            }}\r\n            helperText={props.error ? errorMessage : \"\"}\r\n            style={fieldTheme}\r\n            id=\"password-field\"\r\n            label={label}\r\n            type={visible ? \"text\" : \"password\"}\r\n            autoComplete=\"current-password\"\r\n            variant=\"outlined\"\r\n            onChange={props.onChange}\r\n            InputProps={{\r\n                endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton aria-label=\"toggle password visibility\" onClick={() => setVisible(!visible)}>\r\n                            {visible ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                ),\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\n//isLogin: bool\r\n//loading: bool\r\n//onClick: callback\r\nexport const AuthSubmit = (props) => {\r\n    if (props.loading) {\r\n        return <ReactLoading type=\"bubbles\" color={appThemeConstants.hanPurple} />;\r\n    } else {\r\n        return (\r\n            <Button\r\n                onClick={props.onClick}\r\n                variant=\"contained\"\r\n                style={{\r\n                    width: \"70%\",\r\n                    marginTop: \"15px\",\r\n                    marginBottom: \"15px\",\r\n                    color: \"#ffffff\",\r\n                    backgroundColor: appThemeConstants.hanPurple,\r\n                }}\r\n            >\r\n                {props.isLogin ? \"Log In\" : \"Sign Up\"}\r\n            </Button>\r\n        );\r\n    }\r\n};\r\n\r\n//textTheme: object\r\n//isLogin: bool\r\n//onClick: callback\r\nexport const AltAuth = (props) => {\r\n    return (\r\n        <h4 style={props.textTheme}>\r\n            {props.isLogin ? \"Don't have an account? \" : \"Have an account? \"}\r\n            <u style={{ color: props.textTheme.color, cursor: \"pointer\" }} onClick={props.onClick}>\r\n                {props.isLogin ? \"Sign Up\" : \"Log In\"}\r\n            </u>\r\n        </h4>\r\n    );\r\n};\r\n\r\nexport const namePattern = new RegExp(\"^[a-zA-Z0-9_#?!@$ %^&*-]{3,15}$\");\r\nexport const passwordPattern = new RegExp(\"^[a-zA-Z0-9_#?!@$ %^&*-]{6,20}$\");\r\nlet userName = \"\";\r\nlet password = \"\";\r\n\r\n//setAuthFail: callback\r\n//setLogin: callback\r\nexport const Login = (props) => {\r\n    const currentTheme = useTheme();\r\n    const [nameError, setNameError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    const [successfulLogin, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const { userDispatch, setUserToken } = useContext(UserContext);\r\n\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const submitLogin = async () => {\r\n        setLoading(true);\r\n        let error = false;\r\n        if (!userName.match(namePattern)) {\r\n            error = true;\r\n            setNameError(true);\r\n            setSuccess(false);\r\n        } else {\r\n            setNameError(false);\r\n        }\r\n\r\n        if (!password.match(passwordPattern)) {\r\n            error = true;\r\n            setPasswordError(true);\r\n            setSuccess(false);\r\n        } else {\r\n            setPasswordError(false);\r\n        }\r\n\r\n        if (!error) {\r\n            //make api call to login. If has error, show snackbar, else push main route\r\n            const [hasError, userInfo] = await loginUser(userName, password);\r\n\r\n            if (hasError) {\r\n                setSuccess(false);\r\n                props.setAuthFail((prevState) => ({ message: userInfo, failed: true }));\r\n                setLoading(false);\r\n                return;\r\n            } else {\r\n                userDispatch({ type: UserReducerTypes.getUserAction, payload: { user: userInfo } });\r\n                setUserToken(userInfo.jwtToken);\r\n                setSuccess(true);\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setSuccess(false);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!passwordError && !nameError && successfulLogin) {\r\n        return <Redirect to=\"/main\" />;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...getCardStyle(currentTheme),\r\n                width: \"500px\",\r\n                maxWidth: \"90%\",\r\n            }}\r\n        >\r\n            <CardContent className=\"col\" style={{ alignItems: \"center\", paddingBottom: \"2px\" }}>\r\n                <h1 style={textTheme}>Log In</h1>\r\n                <NameField\r\n                    error={nameError}\r\n                    onChange={(event) => (userName = event.target.value)}\r\n                    onEnter={submitLogin}\r\n                />\r\n                <PasswordField\r\n                    error={passwordError}\r\n                    onChange={(event) => (password = event.target.value)}\r\n                    onEnter={submitLogin}\r\n                />\r\n                <AuthSubmit loading={loading} isLogin={true} onClick={() => submitLogin()} />\r\n                <AltAuth textTheme={textTheme} isLogin={true} onClick={() => props.setLogin(false)} />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, CardContent, useTheme, TextField } from \"@material-ui/core\";\r\n\r\nimport { namePattern, passwordPattern, PasswordField, NameField, AltAuth, AuthSubmit, fieldTheme } from \"./Login\";\r\nimport { signupUser } from \"../api/Auth\";\r\nimport { UserContext } from \"../Contexts\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport { getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport \"../App.css\";\r\n\r\nlet userName = \"\";\r\nlet password = \"\";\r\nlet bio = \"\";\r\n\r\n//onChange: callback\r\n//onEnter: callback\r\n//error: bool\r\n//default: string\r\nexport const BioField = (props) => {\r\n    return (\r\n        <TextField\r\n            defaultValue={props.default}\r\n            onKeyPress={(event) => {\r\n                if (event.key === \"Enter\") {\r\n                    props.onEnter();\r\n                    event.preventDefault();\r\n                }\r\n            }}\r\n            style={fieldTheme}\r\n            label=\"Bio\"\r\n            multiline\r\n            rows={4}\r\n            id=\"bio-field\"\r\n            variant=\"outlined\"\r\n            error={props.error}\r\n            helperText={props.error ? \"Bio cannot be empty\" : \"\"}\r\n            onChange={props.onChange}\r\n        />\r\n    );\r\n};\r\n\r\n//setAuthFail: callback\r\n//setLogin: callback\r\nexport const SignUp = (props) => {\r\n    const currentTheme = useTheme();\r\n\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const [nameError, setNameError] = useState(false);\r\n    const [passwordError, setPasswordError] = useState(false);\r\n    const [bioError, setBioError] = useState(false);\r\n    const [successfulLogin, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { userDispatch, setUserToken } = useContext(UserContext);\r\n\r\n    const submitSignup = async () => {\r\n        setLoading(true);\r\n        let error = false;\r\n        console.log(userName);\r\n        if (!userName.match(namePattern)) {\r\n            error = true;\r\n            setNameError(true);\r\n            setSuccess(false);\r\n        } else {\r\n            setNameError(false);\r\n        }\r\n\r\n        if (!password.match(passwordPattern)) {\r\n            error = true;\r\n            setPasswordError(true);\r\n            setSuccess(false);\r\n        } else {\r\n            setPasswordError(false);\r\n        }\r\n\r\n        if (!bio || bio === \"\") {\r\n            error = true;\r\n            setBioError(true);\r\n            setSuccess(false);\r\n        } else {\r\n            setBioError(false);\r\n        }\r\n\r\n        if (!error) {\r\n            //make api call to login. If has error, show snackbar, else push main route\r\n            const [hasError, userInfo] = await signupUser(userName, password, bio);\r\n            console.log(userInfo);\r\n            if (hasError) {\r\n                setSuccess(false);\r\n                if (userInfo === \"Bad request\") {\r\n                    props.setAuthFail((prevState) => ({ message: \"Username in use\", failed: true }));\r\n                } else {\r\n                    props.setAuthFail((prevState) => ({ message: userInfo, failed: true }));\r\n                }\r\n                setLoading(false);\r\n                return;\r\n            } else {\r\n                userDispatch({ type: UserReducerTypes.getUserAction, payload: { user: userInfo } });\r\n                setUserToken(userInfo.jwtToken);\r\n                setSuccess(true);\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!passwordError && !nameError && !bioError && successfulLogin) {\r\n        return <Redirect to=\"/main\" />;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...getCardStyle(currentTheme),\r\n                width: \"500px\",\r\n                maxWidth: \"90%\",\r\n            }}\r\n        >\r\n            <CardContent className=\"col\" style={{ alignItems: \"center\", paddingBottom: \"2px\" }}>\r\n                <h1 style={textTheme}>Sign Up</h1>\r\n                <NameField\r\n                    error={nameError}\r\n                    onChange={(event) => (userName = event.target.value)}\r\n                    onEnter={submitSignup}\r\n                />\r\n                <PasswordField\r\n                    error={passwordError}\r\n                    onChange={(event) => (password = event.target.value)}\r\n                    onEnter={submitSignup}\r\n                />\r\n                <BioField onEnter={submitSignup} onChange={(event) => (bio = event.target.value)} error={bioError} />\r\n                <AuthSubmit loading={loading} isLogin={false} onClick={() => submitSignup()} />\r\n                <AltAuth textTheme={textTheme} isLogin={false} onClick={() => props.setLogin(true)} />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useTheme, Snackbar, IconButton } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport { Logo } from \"../components/Logo\";\r\nimport { Login } from \"../components/Login\";\r\nimport { SignUp } from \"../components/SignUp\";\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport \"../App.css\";\r\n\r\nexport const LoginSignUp = (props) => {\r\n    const currentTheme = useTheme();\r\n    const [authFail, setAuthFail] = useState({ message: \"\", failed: false });\r\n    const [isLogin, setLogin] = useState(true);\r\n    console.log(`IsLogin: ${isLogin}`);\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n\r\n        setAuthFail((prevState) => ({ message: prevState.message, failed: false }));\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"row\"\r\n            style={{\r\n                backgroundColor: currentTheme.palette.background.default,\r\n                minHeight: \"100vh\",\r\n                justifyContent: \"space-evenly\",\r\n            }}\r\n        >\r\n            <div className=\"col\" style={{ justifyContent: \"center\" }}>\r\n                <Logo width=\"500\" />\r\n                <h1\r\n                    style={{\r\n                        alignSelf: \"center\",\r\n                        paddingTop: \"20px\",\r\n                        fontFamily: appThemeConstants.fontFamily,\r\n                        color: currentTheme.palette.secondary.dark,\r\n                        maxWidth: \"90%\",\r\n                    }}\r\n                >\r\n                    Quickly create and share top ten lists on Rank 10!\r\n                </h1>\r\n            </div>\r\n            {isLogin ? (\r\n                <Login setAuthFail={setAuthFail} setLogin={setLogin} />\r\n            ) : (\r\n                <SignUp setAuthFail={setAuthFail} setLogin={setLogin} />\r\n            )}\r\n\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"left\",\r\n                }}\r\n                open={authFail.failed}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                message={authFail.message}\r\n                action={\r\n                    <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n                        <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\n//color: string\r\n//onClick: callback\r\nexport const BackButton = (props) => {\r\n    return (\r\n        <ArrowBackIcon\r\n            onClick={props.onClick}\r\n            style={{\r\n                fontSize: \"26px\",\r\n                marginLeft: \"10px\",\r\n                color: props.color,\r\n                cursor: \"pointer\",\r\n            }}\r\n        />\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, useTheme, Avatar, makeStyles } from \"@material-ui/core\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\n\r\nimport { getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport \"../App.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatar: {\r\n        height: \"50px\",\r\n        width: \"50px\",\r\n    },\r\n    avIcon: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n}));\r\n\r\n//profPic: string\r\n//userName: string\r\n//userId: number\r\nexport const UserPreviewCard = (props) => {\r\n    const history = useHistory();\r\n    const currentTheme = useTheme();\r\n    const cardTheme = getCardStyle(currentTheme);\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...cardTheme,\r\n                maxWidth: \"100%\",\r\n                width: \"96%\",\r\n                margin: \"4px\",\r\n                padding: \"10px\",\r\n                cursor: \"pointer\",\r\n            }}\r\n            onClick={() => {\r\n                history.push(\"/main/profile/\" + props.userId);\r\n            }}\r\n        >\r\n            {\" \"}\r\n            <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                <Avatar src={props.profPic} className={classes.avatar}>\r\n                    <AccountCircleIcon className={classes.avIcon} />\r\n                </Avatar>\r\n                <div className=\"row\" style={{ justifyContent: \"center\", flexGrow: 1 }}>\r\n                    <h2 style={{ ...textTheme, alignSelf: \"center\" }}>{props.userName}</h2>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import * as api from \"./RankApi\";\r\n\r\nexport const RankedListPreviewTypes = {\r\n    discoverLists: \"discover\",\r\n    likedLists: \"likes\",\r\n    userLists: \"rankedlists\",\r\n    userListsP: \"rankedlistsp\",\r\n    feedLists: \"feed\",\r\n    searchLists: \"search_lists\",\r\n};\r\n\r\n/* \r\n    params: {\r\n        endpointBase: string,\r\n        userId: string,\r\n        page: int,\r\n        sort: int,\r\n        token: string,\r\n        query: string,\r\n        refresh: bool\r\n    } \r\n*/\r\n\r\nexport const getRankedListPreview = async (params) => {\r\n    let { token, refresh } = params;\r\n    if (!token) {\r\n        token = \"\";\r\n    }\r\n\r\n    let endpoint = getEndpoint(params.endpointBase, params.page, params.sort, params.userId, params.query, refresh);\r\n\r\n    const [e, res] = await api.get(endpoint, token);\r\n    return getPagedResponse(e, res, params.page);\r\n};\r\n\r\nfunction getEndpoint(endpointBase, page, sort, userId, query, refresh) {\r\n    let endpoint = \"/\" + endpointBase;\r\n\r\n    switch (endpointBase) {\r\n        case RankedListPreviewTypes.discoverLists:\r\n            endpoint += `/${page}/${sort}`;\r\n            break;\r\n        case RankedListPreviewTypes.likedLists:\r\n            endpoint += `/${page}/${sort}`;\r\n            break;\r\n        case RankedListPreviewTypes.userLists:\r\n            endpoint += `/${userId}/${page}/${sort}`;\r\n            break;\r\n        case RankedListPreviewTypes.userListsP:\r\n            endpoint += `/${page}/${sort}`;\r\n            break;\r\n        case RankedListPreviewTypes.feedLists:\r\n            endpoint += `/${page}`;\r\n            break;\r\n        case RankedListPreviewTypes.searchLists:\r\n            console.log(query);\r\n            endpoint += `/${page}/${sort}?q=${query.replace(/ /g, \"+\")}`;\r\n            break;\r\n    }\r\n\r\n    if (refresh) {\r\n        if (endpointBase === RankedListPreviewTypes.searchLists) {\r\n            endpoint += \"&re=True\";\r\n        } else {\r\n            endpoint += \"?re=True\";\r\n        }\r\n    }\r\n\r\n    return endpoint;\r\n}\r\n\r\nexport function getPagedResponse(error, response, currentPage) {\r\n    if (error) {\r\n        return [error, true, []];\r\n    } else {\r\n        return [error, response.lastPage === currentPage, response.items];\r\n    }    \r\n}","import * as api from \"./RankApi\";\r\nimport { getPagedResponse } from \"./RankedListPreviewRepo\";\r\n\r\nexport const UserPreviewTypes = {\r\n    followingList: \"FOLLOWING_LIST\",\r\n    followersList: \"FOLLOWERS_LIST\",\r\n    likersList: \"LIKERS_LIST\",\r\n    searchUsersList: \"SEARCH_USERS_LIST\",\r\n};\r\n\r\n/* \r\n    params: {\r\n        userId: string,\r\n        page: int,\r\n        sort: int,\r\n        query: string,\r\n        refresh: bool\r\n    } \r\n*/\r\n\r\nconst refreshQuery = (refresh = false) => (refresh ? \"?re=true\" : \"\");\r\n\r\nexport const getFollowing = async (userId, refresh = false) =>\r\n    await api.get(\"/following/\" + userId + refreshQuery(refresh));\r\n\r\nexport const getFollowers = async (userId, refresh = false) =>\r\n    await api.get(\"/followers/\" + userId + refreshQuery(refresh));\r\n\r\nexport const getLikers = async (listId, refresh = false) => await api.get(\"/like/\" + listId + refreshQuery(refresh));\r\n\r\nexport async function searchUsers(params, refresh = false) {\r\n    params.query = params.query.replace(/ /g, \"+\");\r\n    const [e, res] = await api.get(\r\n        \"/search_users/\" + params.page + \"/\" + params.sort + \"?q=\" + params.query + (refresh ? \"&re=true\" : \"\")\r\n    );\r\n\r\n    return getPagedResponse(e, res, params.page);\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useTheme, Dialog } from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { BackButton } from \"./BackButton\";\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { UserPreviewCard } from \"./UserPreviewCard\";\r\nimport { UserPreviewTypes, getFollowers, getFollowing, getLikers } from \"../api/UserPreviewRepo\";\r\nimport \"../App.css\";\r\n\r\n//handleClose: callback\r\n//open: bool\r\n//title: string\r\n//type: string\r\n//name: string\r\nexport const UserListDialog = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const [usersList, setUsersList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    const getUserList = async (refresh) => {\r\n        if (props.open) {\r\n            setLoading(true);\r\n            const [e, res] = await getUsers(props.type)(props.name, refresh);\r\n            if (!e) {\r\n                setUsersList([...res]);\r\n            }\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getUserList(false);\r\n    }, [props.type, props.name, props.open]);\r\n\r\n    useEffect(() => {\r\n        getUserList(true);\r\n    }, [refresh]);\r\n\r\n    if (!props.open) {\r\n        return <i style={{ display: \"none\" }} />;\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div\r\n                className=\"col\"\r\n                style={{\r\n                    backgroundColor: currentTheme.palette.background.default,\r\n                    alignItems: \"center\",\r\n                    overscrollBehaviorY: \"none\",\r\n                }}\r\n            >\r\n                <div\r\n                    className=\"row\"\r\n                    style={{\r\n                        justifyContent: \"space-between\",\r\n                        width: \"400px\",\r\n                        alignItems: \"center\",\r\n                        alignSelf: \"start\",\r\n                        maxWidth: \"100%\",\r\n                        position: \"sticky\",\r\n                        top: \"0\",\r\n                        zIndex: \"1\",\r\n                        backgroundColor: currentTheme.palette.background.default,\r\n                    }}\r\n                >\r\n                    <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                        <BackButton onClick={props.handleClose} />\r\n                        <h1 style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}>\r\n                            {props.title}\r\n                        </h1>\r\n                    </div>\r\n                    <RefreshIcon\r\n                        style={{ cursor: \"pointer\", marginRight: \"8px\" }}\r\n                        onClick={() => setRefresh(!refresh)}\r\n                    />\r\n                </div>\r\n                <div\r\n                    className=\"col\"\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        overscrollBehaviorY: \"scroll\",\r\n                        maxHeight: \"90%\",\r\n                        width: \"100%\",\r\n                        maxWidth: \"100%\",\r\n                        marginBottom: \"6px\",\r\n                    }}\r\n                >\r\n                    {loading ? (\r\n                        <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                    ) : !usersList.length ? (\r\n                        <h3 style={textTheme}>No users found</h3>\r\n                    ) : (\r\n                        usersList.map((user) => (\r\n                            <UserPreviewCard\r\n                                key={`user_${user.username}`}\r\n                                userName={user.username}\r\n                                profPic={user.profilePic}\r\n                                userId={user.userId}\r\n                            />\r\n                        ))\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nfunction getUsers(type) {\r\n    switch (type) {\r\n        case UserPreviewTypes.followersList:\r\n            return getFollowers;\r\n        case UserPreviewTypes.followingList:\r\n            return getFollowing;\r\n        case UserPreviewTypes.likersList:\r\n            return getLikers;\r\n        default:\r\n            throw new Error(\"Bro what are you doing?\");\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\n\r\n// label: string\r\n// width: string\r\n// maxWidth: string\r\n// onClick: callback\r\n// disabled: bool\r\nexport const ActionButton = (props) => {\r\n    const { maxWidth } = props;\r\n    return (\r\n        <Button\r\n            onClick={props.onClick}\r\n            variant=\"contained\"\r\n            disabled={props.disabled}\r\n            style={{\r\n                maxWidth: maxWidth ? maxWidth : \"75%\",\r\n                width: props.width,\r\n                marginTop: \"15px\",\r\n                marginBottom: \"15px\",\r\n                color: \"#ffffff\",\r\n                backgroundColor: props.color ? props.color : appThemeConstants.hanPurple,\r\n            }}\r\n        >\r\n            {props.label}\r\n        </Button>\r\n    );\r\n};\r\n","import * as api from \"./RankApi\";\r\n\r\nexport const likeRes = { liked: \"LIKED\", unliked: \"UNLIKED\" };\r\nexport const followRes = { follow: \"FOLLOW\", unfollow: \"UNFOLLOW\" };\r\n\r\nexport const getUser = async (userId) => await api.get(\"/users/\" + userId);\r\n\r\nexport const deleteUser = async (token) => await api.del(\"/users\", token);\r\n\r\nexport const changePassword = async (password, token) => await api.put(\"/users\", token, { password: password });\r\n\r\nexport const updateBio = async (bio, token) => await api.put(\"/users\", token, { bio: bio });\r\n\r\nexport const updateProfilePic = async (profPic, token) => await api.put(\"/users\", token, { profilePic: profPic });\r\n\r\nexport async function followUser(userId, token) {\r\n    const [e, res] = await api.post(\"/follow/\" + userId, token);\r\n    if (e) {\r\n        return [e, res];\r\n    } else {\r\n        if (res.message.includes(\"unfollow\")) {\r\n            return [e, followRes.unfollow];\r\n        } else {\r\n            return [e, followRes.follow];\r\n        }\r\n    }\r\n}\r\n\r\nexport async function likeList(listId, token) {\r\n    const [e, res] = await api.post(\"/like/\" + listId, token);\r\n    return getLikeResponse(e, res);\r\n}\r\n\r\nexport function getLikeResponse(error, response) {\r\n    if (error) {\r\n        return [error, response];\r\n    } else if (response.message.includes(\"unliked\")) {\r\n        return [error, likeRes.unliked];\r\n    } else {\r\n        return [error, likeRes.liked];\r\n    }\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { useTheme, Dialog, makeStyles, Avatar, TextField } from \"@material-ui/core\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { BackButton } from \"./BackButton\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { UserContext } from \"../Contexts\";\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { fieldTheme } from \"./Login\";\r\nimport { updateProfilePic } from \"../api/UserRepo\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport \"../App.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatar: {\r\n        height: \"200px\",\r\n        width: \"200px\",\r\n        marginBottom: \"12px\",\r\n    },\r\n    avIcon: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n}));\r\n\r\n//handleClose: callback\r\n//open: bool\r\nexport const ProfilePicChooser = (props) => {\r\n    const { user, userDispatch, userToken } = useContext(UserContext);\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const classes = useStyles();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [profPic, setProfPic] = useState(user.profilePic);\r\n    if (!props.open) {\r\n        return <i style={{ display: \"none\" }} />;\r\n    }\r\n    return (\r\n        <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div style={{ backgroundColor: currentTheme.palette.background.default }}>\r\n                <div className=\"row\" style={{ alignItems: \"center\", width: \"500px\", maxWidth: \"95%\" }}>\r\n                    <BackButton onClick={props.handleClose} />\r\n                    <h1 style={{ ...textTheme, marginLeft: \"22px\" }}>Choose Profile Pic</h1>\r\n                </div>\r\n                <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n                    <img\r\n                        style={{ display: \"none\" }}\r\n                        src={profPic}\r\n                        onError={() => setError(true)}\r\n                        onLoad={() => setError(false)}\r\n                    />\r\n                    <Avatar src={profPic} className={classes.avatar}>\r\n                        <AccountCircleIcon className={classes.avIcon} />\r\n                    </Avatar>\r\n                    <TextField\r\n                        defaultValue={profPic}\r\n                        error={error}\r\n                        helperText={error ? \"Image not valid\" : \"\"}\r\n                        style={fieldTheme}\r\n                        id=\"url-field\"\r\n                        label=\"Image Url\"\r\n                        variant=\"outlined\"\r\n                        onChange={(event) => setProfPic(event.target.value)}\r\n                    />\r\n                    {loading ? (\r\n                        <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                    ) : (\r\n                        <ActionButton\r\n                            disabled={error}\r\n                            width=\"225px\"\r\n                            onClick={async () => {\r\n                                setLoading(true);\r\n                                const [e, res] = await updateProfilePic(profPic, userToken);\r\n                                if (e) {\r\n                                    setError(true);\r\n                                } else {\r\n                                    setError(false);\r\n                                    userDispatch({\r\n                                        type: UserReducerTypes.updateProfilePicAction,\r\n                                        payload: { profPic: profPic },\r\n                                    });\r\n                                    props.handleClose();\r\n                                }\r\n                                setLoading(false);\r\n                            }}\r\n                            label=\"Set As Profile Pic\"\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n//<ReactLoading type=\"bubbles\" color={appThemeConstants.hanPurple} />\r\n","const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n];\r\n\r\nexport const SortOptions = {\r\n    likesDesc: 0,\r\n    dateDesc: 1,\r\n    dateAsc: 2,\r\n};\r\n\r\nexport function containsId(idList, id) {\r\n    for (var i = 0; i < idList.length; i++) {\r\n        if (idList[i][\"$oid\"] === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function tsToDate(timeStamp) {\r\n    const date = new Date(timeStamp);\r\n    return `${months[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\r\n}\r\n\r\nexport function tsToDelta(timeStamp) {\r\n    const mins = 1000 * 60;\r\n    const date = new Date(timeStamp);\r\n    const currentDate = Date.now();\r\n    const diffInMs = currentDate - date.getTime();\r\n\r\n    const diffInDays = diffInMs / (mins * 60 * 24);\r\n    const diffInHours = diffInMs / (mins * 60);\r\n    const diffInMinutes = diffInMs / mins;\r\n    const diffInSec = diffInMs / 1000;\r\n\r\n    if (diffInSec <= 0 || (diffInSec >= 0 && diffInSec < 60)) {\r\n        return \"Just Now\";\r\n    } else if (diffInMinutes >= 1 && diffInMinutes < 60) {\r\n        return Math.round(diffInMinutes) + \"m ago\";\r\n    } else if (diffInHours >= 1 && diffInHours < 24) {\r\n        return Math.round(diffInHours) + \"h ago\";\r\n    } else if (diffInDays >= 1 && diffInDays < 30) {\r\n        if (diffInDays >= 1 && diffInDays < 7) {\r\n            return Math.round(diffInDays) + \"d ago\";\r\n        } else {\r\n            return Math.round(diffInDays / 7) + \"w ago\";\r\n        }\r\n    } else if (diffInDays >= 30 && diffInDays < 365) {\r\n        return Math.round(diffInDays / 30) + \"mo ago\";\r\n    } else {\r\n        return Math.round(diffInDays / 365) + \"y ago\";\r\n    }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Menu, MenuItem, useTheme } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\n\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { UserPreviewCard } from \"./UserPreviewCard\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { SortOptions } from \"../misc/Utils\";\r\nimport { searchUsers } from \"../api/UserPreviewRepo\";\r\nimport \"../App.css\";\r\n\r\n//onSort: callback\r\n//user: bool\r\nexport const SortMenu = (props) => {\r\n    const [anchor, setAnchor] = useState(null);\r\n    const onItemClick = (sort) => {\r\n        props.onSort(sort);\r\n        setAnchor(null);\r\n    };\r\n    return (\r\n        <div>\r\n            <SortIcon\r\n                style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\r\n                onClick={(event) => setAnchor(event.currentTarget)}\r\n            />\r\n            <Menu id=\"simple-menu\" anchorEl={anchor} keepMounted open={Boolean(anchor)} onClose={() => setAnchor(null)}>\r\n                <MenuItem onClick={() => onItemClick(SortOptions.likesDesc)}>{ props.user ? \"Points\" : \"Likes\"}</MenuItem>\r\n                <MenuItem onClick={() => onItemClick(SortOptions.dateAsc)}>Oldest to Newest</MenuItem>\r\n                <MenuItem onClick={() => onItemClick(SortOptions.dateDesc)}>Newest to Oldest</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n};\r\n\r\nlet page = 0;\r\nlet sort = SortOptions.likesDesc;\r\n//query: string\r\nexport const SearchUsers = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const [userList, setUserList] = useState([]);\r\n    const [hitMax, setHitMax] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSort = (sortOption) => {\r\n        (async () => {\r\n            page = 0;\r\n            setLoading(true);\r\n            const [e, lastPage, res] = await searchUsers({ page: 0, sort: sortOption, query: props.query });\r\n            setHitMax(lastPage);\r\n            if (!e) {\r\n                setUserList([...res]);\r\n            }\r\n            setLoading(false);\r\n            sort = sortOption;\r\n        })();\r\n    };\r\n\r\n    useEffect(() => {\r\n        onSort(sort);\r\n    }, [props.query]);\r\n\r\n    return (\r\n        <div className=\"col\" style={{ alignItems: \"center\", width: \"100%\" }}>\r\n            <div\r\n                className=\"row\"\r\n                style={{ alignItems: \"center\", justifyContent: \"start\", width: \"800px\", maxWidth: \"100%\" }}\r\n            >\r\n                <h2 style={textTheme}>Searching for users \"{props.query}\"</h2>\r\n                <SortMenu onSort={onSort} user={true} />\r\n            </div>\r\n            <div className=\"row\" style={{ justifyContent: \"center\", flexWrap: \"wrap\", width: \"80%\" }}>\r\n                {userList.length ? (\r\n                    userList.map((user) => (\r\n                        <UserPreviewCard\r\n                            key={`user_${user.username}`}\r\n                            userName={user.username}\r\n                            userId={user.userId}\r\n                            profPic={user.profilePic}\r\n                        />\r\n                    ))\r\n                ) : (\r\n                    <h3 style={textTheme}>No users found</h3>\r\n                )}\r\n            </div>\r\n            {loading ? (\r\n                <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n            ) : hitMax ? (\r\n                <i style={{ display: \"none\" }} />\r\n            ) : (\r\n                <ActionButton\r\n                    label=\"Load more\"\r\n                    width=\"120px\"\r\n                    onClick={async () => {\r\n                        setLoading(true);\r\n                        const [e, lastPage, res] = await searchUsers({\r\n                            page: page + 1,\r\n                            sort: sort,\r\n                            query: props.query,\r\n                        });\r\n                        setHitMax(lastPage);\r\n                        if (!e) {\r\n                            setUserList([...userList, ...res]);\r\n                        }\r\n                        setLoading(false);\r\n                        page += 1;\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import * as api from \"./RankApi\";\r\nimport { getPagedResponse } from \"./RankedListPreviewRepo\";\r\nimport {getLikeResponse} from \"./UserRepo\"\r\n\r\nexport async function likeComment(commentId, token) {\r\n    const [e, res] = await api.post(\"/like_comment/\" + commentId, token);\r\n    return getLikeResponse(e, res);\r\n}\r\n\r\nexport async function getUserComments(page=0, sort=0, token, refresh = false) {\r\n    const [e, res] = await api.get(`/user_comments/${page}/${sort}${refresh ? \"?re=True\" : \"\"}`, token);\r\n    return getPagedResponse(e, res, page);\r\n}\r\n\r\nexport async function getComments(listId, page = 0, sort = 0, refresh = false) {\r\n    const [e, res] = await api.get(`/comments/${listId}/${page}/${sort}${refresh ? \"?re=True\" : \"\"}`);\r\n    return getPagedResponse(e, res, page);\r\n}\r\n\r\nexport async function createComment(listId, comment, token, editing = false) {\r\n    const endpoint = \"/comment/\" + listId;\r\n    const body = { comment: comment };\r\n\r\n    return editing ? await api.put(endpoint, token, body) : await api.post(endpoint, token, body);\r\n}\r\n\r\nexport const deleteComment = async(commentId, token) => await api.del(\"/comment/\" + commentId, token);\r\n\r\nexport const getCommentParent = async(commentId) => await api.get(\"/comment/\" + commentId);","const clone = require(\"rfdc\")();\r\n\r\nexport const ListReducerTypes = {\r\n    getRankedList: \"GET_R_LIST\",\r\n    updateTitle: \"UPDATE_TITLE\",\r\n    updatePrivate: \"UPDATE_PRIVATE\",\r\n    updateItem: \"UPDATE_ITEM\",\r\n    reOrderList: \"RE_ORDER\",\r\n    createItem: \"CREATE_ITEM\",\r\n    deleteItem: \"DELETE_ITEM\",\r\n};\r\n\r\nexport function initRankedList() {\r\n    return {\r\n        private: false,\r\n        rankItems: [],\r\n        title: \"Edit Title\",\r\n    };\r\n}\r\n\r\nexport function createRankedItem(\r\n    ranking = 1,\r\n    itemName = \"\",\r\n    description = \"\",\r\n    picture = \"\",\r\n    listTitle = \"\",\r\n    priv = false\r\n) {\r\n    return {\r\n        new: true,\r\n        ranking: ranking,\r\n        itemName: itemName,\r\n        description: description,\r\n        picture: picture,\r\n        listTitle: listTitle,\r\n        private: priv,\r\n        itemId: Math.floor(Math.random() * 999999999 + 1),\r\n    };\r\n}\r\n\r\nfunction reOrder(arr, startIndex, endIndex) {\r\n    const result = Array.from(arr);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n}\r\n\r\nfunction updateParentProperties(state) {\r\n    for (let i = 0; i < state.rankItems.length; i++) {\r\n        state.rankItems[i].private = state.private;\r\n        state.rankItems[i].listTitle = state.title;\r\n    }\r\n}\r\n\r\nexport function rankedListReducer(state, action) {\r\n    let stateCopy = {};\r\n    let p = {};\r\n    switch (action.type) {\r\n        //{isNew: bool, rankedList: object}\r\n        case ListReducerTypes.getRankedList:\r\n            return action.payload.isNew\r\n                ? { ...state, ...initRankedList() }\r\n                : { ...state, ...clone(action.payload.rankedList) };\r\n        //{title: string}\r\n        case ListReducerTypes.updateTitle:\r\n            stateCopy = clone(state);\r\n            stateCopy.title = action.payload.title;\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        //{private: bool}\r\n        case ListReducerTypes.updatePrivate:\r\n            stateCopy = clone(state);\r\n            stateCopy.private = action.payload.private;\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        //{index: number, itemName: string, description: string, picture: string}\r\n        case ListReducerTypes.updateItem:\r\n            p = action.payload;\r\n            stateCopy = clone(state);\r\n            stateCopy.rankItems[p.index].itemName = p.itemName;\r\n            stateCopy.rankItems[p.index].description = p.description;\r\n            stateCopy.rankItems[p.index].picture = p.picture;\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        // {startIndex: number, endIndex: number}\r\n        case ListReducerTypes.reOrderList:\r\n            stateCopy = clone(state);\r\n            stateCopy.rankItems = reOrder(\r\n                clone(stateCopy.rankItems),\r\n                action.payload.startIndex,\r\n                action.payload.endIndex\r\n            );\r\n\r\n            for (let i = 0; i < stateCopy.rankItems.length; i++) {\r\n                stateCopy.rankItems[i].ranking = i + 1;\r\n            }\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        //{itemName: string, description: string, picture: string}\r\n        case ListReducerTypes.createItem:\r\n            p = action.payload;\r\n            stateCopy = clone(state);\r\n            stateCopy.rankItems.push(\r\n                createRankedItem(\r\n                    stateCopy.rankItems.length + 1,\r\n                    p.itemName,\r\n                    p.description,\r\n                    p.picture,\r\n                    stateCopy.title,\r\n                    stateCopy.private\r\n                )\r\n            );\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        //{index: number}\r\n        case ListReducerTypes.deleteItem:\r\n            stateCopy = clone(state);\r\n            stateCopy.rankItems.splice(action.payload.index, 1);\r\n            for (let i = 0; i < stateCopy.rankItems.length; i++) {\r\n                stateCopy.rankItems[i].rank = i + 1;\r\n            }\r\n            updateParentProperties(stateCopy);\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import * as api from \"./RankApi\";\r\n\r\nexport async function getRankedList(listId) {\r\n    return await api.get(`/rankedlist/${listId}`);\r\n}\r\n\r\n/* rankedList\r\n    {\r\n        \"title\": string,\r\n        \"rankItems\": [\r\n            {\r\n                \"itemName\": string,\r\n                \"ranking\": int,\r\n                \"description\": optional string,\r\n                \"picture\": optional string\r\n            }\r\n        ]\r\n}\r\n*/\r\n\r\n\r\nexport async function createRankedList(rankedList, token) {\r\n    for (let i = 0; i < rankedList[\"rankItems\"].length; i++) {\r\n        delete rankedList[\"rankItems\"][i][\"new\"];\r\n        delete rankedList[\"rankItems\"][i][\"itemId\"];\r\n    }\r\n    return await api.post(\"/rankedlist\", token, rankedList);\r\n}\r\n\r\nexport async function updateRankedList(rankedList, listId, token) {\r\n    for (let i = 0; i < rankedList[\"rankItems\"].length; i++) {\r\n        if (rankedList[\"rankItems\"][i].new) {\r\n            delete rankedList[\"rankItems\"][i][\"new\"];\r\n            delete rankedList[\"rankItems\"][i][\"itemId\"];\r\n        }\r\n    }\r\n    \r\n    return await api.put(`/rankedlist/${listId}`, token, {\r\n        title: rankedList[\"title\"],\r\n        private: rankedList[\"private\"],\r\n        rankItems: rankedList[\"rankItems\"],\r\n    });\r\n}\r\n\r\nexport async function deleteRankedList(listId, token) {\r\n    return await api.del(`/rankedlist/${listId}`, token);\r\n}","import React from \"react\";\r\nimport { Avatar, Card } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport \"../App.css\";\r\n\r\n// rankItem: object\r\n// textTheme: object\r\n// cardTheme: object\r\n// isMain: bool\r\n// onEdit: callback\r\n// onDelte: callback\r\nconst RankItemInnerCard = (props) => {\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...props.cardStyle,\r\n                width: \"412px\",\r\n                maxWidth: \"96%\",\r\n                paddingLeft: \"10px\",\r\n                paddingRight: \"10px\",\r\n                paddingTop: \"10px\",\r\n                marginBottom: \"8px\",\r\n                borderRadius: \"15px\",\r\n                marginLeft: \"8px\",\r\n                marginRight: \"8px\",\r\n            }}\r\n        >\r\n            <div className=\"col\" style={{ alignSelf: \"center\", alignItems: \"center\", width: \"100%\" }}>\r\n                <div\r\n                    className=\"row\"\r\n                    style={{ alignItems: \"center\", width: \"100%\", flexWrap: \"nowrap\", marginBottom: \"2px\" }}\r\n                >\r\n                    <Avatar\r\n                        style={{\r\n                            height: \"40px\",\r\n                            width: \"40px\",\r\n                            backgroundColor: appThemeConstants.lavender,\r\n                            margin: \"12px\",\r\n                        }}\r\n                    >\r\n                        <h3\r\n                            style={{\r\n                                fontFamily: appThemeConstants.fontFamily,\r\n                                color: \"white\",\r\n                                fontSize: \"22px\",\r\n                            }}\r\n                        >\r\n                            {props.rankItem.ranking}\r\n                        </h3>\r\n                    </Avatar>\r\n                    <h3\r\n                        style={{\r\n                            ...props.textTheme,\r\n                            margin: \"0px\",\r\n                            marginLeft: \"2px\",\r\n                            fontSize: \"24px\",\r\n                            whiteSpace: \"nowrap\",\r\n                            overflow: \"hidden\",\r\n                            textOverflow: \"ellipsis\",\r\n                        }}\r\n                    >\r\n                        {props.rankItem.itemName}\r\n                    </h3>\r\n                </div>\r\n                <img\r\n                    style={{ borderRadius: \"15px\", width: \"375px\", maxWidth: \"98%\", alignSelf: \"center\" }}\r\n                    src={props.rankItem.picture}\r\n                />\r\n                <h3\r\n                    style={{\r\n                        ...props.textTheme,\r\n                        textAlign: \"center\",\r\n                        marginTop: props.rankItem.picture ? \"8px\" : \"0px\",\r\n                        marginBottom: props.rankItem.description ? \"10px\" : \"6px\",\r\n                    }}\r\n                >\r\n                    {props.rankItem.description}\r\n                </h3>\r\n                {!props.isMain ? (\r\n                    <i style={{ display: \"none\" }} />\r\n                ) : (\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-evenly\",\r\n                            marginBottom: \"10px\",\r\n                        }}\r\n                    >\r\n                        <EditIcon style={{ cursor: \"pointer\" }} onClick={props.onEdit} />\r\n                        <DeleteIcon style={{ cursor: \"pointer\" }} onClick={props.onDelete} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\n// rankItem: object\r\n// onClick: callback\r\n// textTheme: object\r\n// cardTheme: object\r\n// provided: object\r\n// innerRef: object\r\n// isMain: bool\r\nexport class RankItemCard extends React.Component {\r\n    render() {\r\n        if (this.props.provided) {\r\n            return (\r\n                <div\r\n                    style={{ width: \"100%\" }}\r\n                    {...this.props.provided.draggableProps}\r\n                    {...this.props.provided.dragHandleProps}\r\n                    ref={this.props.innerRef}\r\n                >\r\n                    <RankItemInnerCard\r\n                        rankItem={this.props.rankItem}\r\n                        onClick={this.props.onClick}\r\n                        textTheme={this.props.textTheme}\r\n                        cardTheme={this.props.cardTheme}\r\n                        isMain={this.props.isMain}\r\n                        onEdit={this.props.onEdit}\r\n                        onDelete={this.props.onDelete}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div style={{ width: \"100%\" }}>\r\n                <RankItemInnerCard\r\n                    rankItem={this.props.rankItem}\r\n                    onClick={this.props.onClick}\r\n                    textTheme={this.props.textTheme}\r\n                    cardTheme={this.props.cardTheme}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { useEffect, useReducer, useState } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { Dialog, useTheme } from \"@material-ui/core\";\r\n\r\nimport { appThemeConstants, getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport { BackButton } from \"./BackButton\";\r\nimport { ListReducerTypes, rankedListReducer } from \"../reducers/RankedListReducer\";\r\nimport { getRankedList } from \"../api/RankedListRepo\";\r\nimport { RankItemCard } from \"./RankItemCard\";\r\nimport { CardHeader, CardLikeBar } from \"./RankedListCard\";\r\n\r\nimport \"../App.css\";\r\n\r\n// listId: string\r\n// open: bool\r\n// onClose: callback\r\n// mainUser: object\r\n// profPic: string\r\n// name: string\r\n// onEdit: callback\r\nexport const RankedListView = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const cardTheme = getCardStyle(currentTheme);\r\n    const [rankedList, rankedListDispatch] = useReducer(rankedListReducer, null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (!props.open) {\r\n                return;\r\n            }\r\n            setLoading(true);\r\n\r\n            const [e, res] = await getRankedList(props.listId);\r\n            if (!e) {\r\n                rankedListDispatch({\r\n                    type: ListReducerTypes.getRankedList,\r\n                    payload: { isNew: false, rankedList: res },\r\n                });\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [props.listId, props.open]);\r\n\r\n    const listNull = loading || !rankedList;\r\n    return (\r\n        <Dialog onClose={props.onClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div\r\n                className=\"col\"\r\n                style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: currentTheme.palette.background.default,\r\n                    alignItems: \"center\",\r\n                    overscrollBehaviorY: \"none\",\r\n                }}\r\n            >\r\n                <div\r\n                    className=\"row\"\r\n                    style={{\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                        alignSelf: \"start\",\r\n                        width: \"100%\",\r\n                        position: \"sticky\",\r\n                        top: \"0\",\r\n                        zIndex: \"1\",\r\n                        backgroundColor: currentTheme.palette.background.default,\r\n                    }}\r\n                >\r\n                    <div className=\"row\" style={{ alignItems: \"center\", justifyContent: \"start\" }}>\r\n                        <BackButton onClick={props.onClose} />\r\n                        <h1 style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}>\r\n                            {listNull ? \"Loading...\" : rankedList.title}\r\n                        </h1>\r\n                    </div>\r\n                    {props.mainUser.user.username === props.name ? (\r\n                        <EditIcon style={{ cursor: \"pointer\", marginRight: \"10px\" }} onClick={props.onEdit} />\r\n                    ) : (\r\n                        <i style={{ display: \"none\" }} />\r\n                    )}\r\n                </div>\r\n                <div\r\n                    className=\"col\"\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        overscrollBehaviorY: \"scroll\",\r\n                        maxWidth: \"100%\",\r\n                    }}\r\n                >\r\n                    <CardHeader\r\n                        name={listNull ? \"Loading...\" : rankedList.username}\r\n                        userId={listNull ? 1 : rankedList.userId}\r\n                        profPic={props.profPic}\r\n                        timeStamp={listNull ? 0 : rankedList.dateCreated}\r\n                        isDark={currentTheme.palette.type === \"dark\"}\r\n                        full={true}\r\n                    />\r\n                    {listNull ? (\r\n                        <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                    ) : (\r\n                        rankedList.rankItems.map((rItem) => (\r\n                            <RankItemCard\r\n                                key={rItem.ranking}\r\n                                rankItem={rItem}\r\n                                textTheme={textTheme}\r\n                                cardTheme={cardTheme}\r\n                                isMain={false}\r\n                            />\r\n                        ))\r\n                    )}\r\n                    {listNull ? (\r\n                        <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                    ) : (\r\n                        <div style={{ width: \"100%\" }}>\r\n                            <CardLikeBar\r\n                                numComments={rankedList.numComments}\r\n                                numLikes={rankedList.numLikes}\r\n                                textTheme={textTheme}\r\n                                id={rankedList.listId}\r\n                                isLiked={props.mainUser.user.likedLists.includes(rankedList.listId)}\r\n                                mainUser={props.mainUser}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, TextField, useTheme } from \"@material-ui/core\";\r\n\r\nimport { getTextTheme } from \"../misc/AppTheme\";\r\nimport { fieldTheme } from \"./Login\";\r\nimport { ActionButton } from \"./ActionButton\";\r\n\r\n// open: bool\r\n// rankItem: object\r\n// handleClose: callback\r\n// onSave: callback\r\n// index: number\r\n// isNew: bool\r\nexport const RankItemEdit = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const [pictureError, setPictureError] = useState(false);\r\n    const [nameError, setNameError] = useState(false);\r\n\r\n    const [picture, setPicture] = useState(props.isNew ? \"\" : props.rankItem.picture);\r\n    const [name, setName] = useState(props.isNew ? \"\" : props.rankItem.itemName);\r\n    const [desc, setDesc] = useState(props.isNew ? \"\" : props.rankItem.description);\r\n\r\n    useEffect(() => {\r\n        setPicture(props.isNew ? \"\" : props.rankItem.picture);\r\n        setName(props.isNew ? \"\" : props.rankItem.itemName);\r\n        setDesc(props.isNew ? \"\" : props.rankItem.description);\r\n    }, [props.open, props.isNew, props.rankItem]);\r\n\r\n    if (!props.open) {\r\n        return <i style={{ display: \"none\" }} />;\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div\r\n                className=\"col\"\r\n                style={{ alignItems: \"center\", backgroundColor: currentTheme.palette.background.default }}\r\n            >\r\n                <img\r\n                    style={{ display: \"none\" }}\r\n                    src={picture}\r\n                    onError={() => setPictureError(true)}\r\n                    onLoad={() => setPictureError(false)}\r\n                />\r\n\r\n                {pictureError ? (\r\n                    <h1 style={textTheme}>No Image</h1>\r\n                ) : (\r\n                    <img\r\n                        style={{\r\n                            borderRadius: \"4px\",\r\n                            width: \"375px\",\r\n                            maxWidth: \"98%\",\r\n                            alignSelf: \"center\",\r\n                            margin: \"8px\",\r\n                        }}\r\n                        src={picture}\r\n                    />\r\n                )}\r\n\r\n                <TextField\r\n                    defaultValue={picture}\r\n                    style={fieldTheme}\r\n                    id=\"pic-field\"\r\n                    label=\"Picture\"\r\n                    variant=\"outlined\"\r\n                    onChange={(event) => setPicture(event.target.value)}\r\n                />\r\n\r\n                <TextField\r\n                    defaultValue={name}\r\n                    error={nameError}\r\n                    helperText={nameError ? \"Name cannot be empty\" : \"\"}\r\n                    style={fieldTheme}\r\n                    id=\"name-field\"\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    onChange={(event) => setName(event.target.value)}\r\n                />\r\n\r\n                <TextField\r\n                    defaultValue={desc}\r\n                    style={fieldTheme}\r\n                    id=\"desc-field\"\r\n                    label=\"Desc\"\r\n                    variant=\"outlined\"\r\n                    onChange={(event) => setDesc(event.target.value)}\r\n                />\r\n\r\n                <ActionButton\r\n                    disabled={nameError}\r\n                    width=\"225px\"\r\n                    onClick={async () => {\r\n                        if (!name) {\r\n                            setNameError(true);\r\n                            setTimeout(() => setNameError(false), 3000);\r\n                            return;\r\n                        }\r\n                        if (props.isNew) {\r\n                            props.onSave(0, name, desc, picture);\r\n                        } else {\r\n                            props.onSave(props.index, name, desc, picture);\r\n                        }\r\n                        props.handleClose();\r\n                    }}\r\n                    label=\"Save Item\"\r\n                />\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nconst Alert = (props) => <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n\r\nexport const closeErrorSB = (event, reason, setOpen) => {\r\n    if (reason === \"clickaway\") {\r\n        return;\r\n    }\r\n\r\n    setOpen(false);\r\n};\r\n\r\n// message: string\r\n// open: bool\r\n// handleClose: callback\r\nexport const ErrorSnack = (props) => {\r\n    const severity = props.severity ? props.severity : \"error\";\r\n    return (\r\n        <Snackbar open={props.open} autoHideDuration={3000} onClose={props.handleClose}>\r\n            <Alert onClose={props.handleClose} severity={severity}>\r\n                {props.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};\r\n","import React, { useEffect, useReducer, useState } from \"react\";\r\nimport { Dialog, TextField, useTheme } from \"@material-ui/core\";\r\nimport { Draggable, DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport ReactLoading from \"react-loading\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\n\r\nimport { appThemeConstants, getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport { ListReducerTypes, rankedListReducer } from \"../reducers/RankedListReducer\";\r\nimport { getRankedList } from \"../api/RankedListRepo\";\r\nimport { BackButton } from \"./BackButton\";\r\nimport { RankItemCard } from \"./RankItemCard\";\r\nimport { RankItemEdit } from \"./RankItemEdit\";\r\nimport \"../App.css\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\n\r\nlet listTitle = \"\";\r\n\r\n// open: bool\r\n// isNew: bool\r\n// listId: string\r\n// mainUser: object\r\n// onClose: callback\r\n// onSave: callback\r\n// onDelete: callback\r\nexport const RankedListEdit = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const cardTheme = getCardStyle(currentTheme);\r\n    const [rankedList, rankedListDispatch] = useReducer(rankedListReducer, null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [editTitle, setEditTitle] = useState(false);\r\n    const [titleError, setTitleError] = useState(false);\r\n\r\n    const [editItem, setEditItem] = useState(null);\r\n    const [editIndex, setEditIndex] = useState(null);\r\n    const [openEdit, setOpenEdit] = useState(false);\r\n    const [openNew, setOpenNew] = useState(false);\r\n    const [apiError, setApiError] = useState(false);\r\n    const [validList, setValidList] = useState(false);\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        if (result.destination.index === result.source.index) {\r\n            return;\r\n        }\r\n\r\n        rankedListDispatch({\r\n            type: ListReducerTypes.reOrderList,\r\n            payload: { startIndex: result.source.index, endIndex: result.destination.index },\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (!props.open) {\r\n                return;\r\n            }\r\n\r\n            if (props.isNew) {\r\n                rankedListDispatch({\r\n                    type: ListReducerTypes.getRankedList,\r\n                    payload: { isNew: props.isNew },\r\n                });\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n\r\n            const [e, res] = await getRankedList(props.listId);\r\n            setApiError(e);\r\n            if (!e) {\r\n                rankedListDispatch({\r\n                    type: ListReducerTypes.getRankedList,\r\n                    payload: { isNew: props.isNew, rankedList: res },\r\n                });\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [props.listId, props.open, props.isNew]);\r\n\r\n    const beforeExit = () => {\r\n        if (!rankedList || rankedList.rankItems.length < 1 || !rankedList.title) {\r\n            setValidList(true);\r\n            setTimeout(() => setValidList(false), 3000);\r\n            return;\r\n        }\r\n\r\n        props.onSave(rankedList);\r\n        props.onClose();\r\n    };\r\n\r\n    const listNull = loading || !rankedList;\r\n    if (!props.open) {\r\n        return <i style={{ display: \"none\" }} />;\r\n    }\r\n    return (\r\n        <Dialog\r\n            onClose={beforeExit}\r\n            aria-labelledby=\"customized-dialog-title\"\r\n            open={props.open}\r\n        >\r\n            <div\r\n                className=\"col\"\r\n                style={{\r\n                    width: \"100%\",\r\n                    backgroundColor: currentTheme.palette.background.default,\r\n                    alignItems: \"center\",\r\n                    overscrollBehaviorY: \"none\",\r\n                }}\r\n            >\r\n                <div\r\n                    className=\"row\"\r\n                    style={{\r\n                        paddingTop: \"10px\",\r\n                        paddingBottom: \"10px\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                        alignSelf: \"start\",\r\n                        width: \"100%\",\r\n                        position: \"sticky\",\r\n                        top: \"0\",\r\n                        zIndex: \"1\",\r\n                        backgroundColor: currentTheme.palette.background.default,\r\n                    }}\r\n                >\r\n                    <div className=\"row\" style={{ alignItems: \"center\", justifyContent: \"start\" }}>\r\n                        <BackButton\r\n                            onClick={beforeExit}\r\n                        />\r\n                        {listNull ? (\r\n                            <h1 style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}>\r\n                                Loading...\r\n                            </h1>\r\n                        ) : editTitle ? (\r\n                            <TextField\r\n                                onKeyPress={(event) => {\r\n                                    if (event.key === \"Enter\") {\r\n                                        if (listTitle.length > 20) {\r\n                                            setTitleError(true);\r\n                                            return;\r\n                                        }\r\n                                        rankedListDispatch({\r\n                                            type: ListReducerTypes.updateTitle,\r\n                                            payload: { title: listTitle },\r\n                                        });\r\n                                        setEditTitle(false);\r\n                                        event.preventDefault();\r\n                                    }\r\n                                }}\r\n                                onChange={(event) => {\r\n                                    listTitle = event.target.value;\r\n                                    setTitleError(false);\r\n                                }}\r\n                                error={titleError}\r\n                                helperText={titleError ? \"Must have < 20 characters\" : \"\"}\r\n                                id=\"standard-basic\"\r\n                                style={{\r\n                                    marginLeft: \"22px\",\r\n                                    fontSize: \"22px\",\r\n                                }}\r\n                                defaultValue={rankedList.title}\r\n                            />\r\n                        ) : (\r\n                            <h1\r\n                                onClick={() => setEditTitle(true)}\r\n                                style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}\r\n                            >\r\n                                {rankedList.title}\r\n                            </h1>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"row\" style={{ alignItems: \"center\", justifyContent: \"end\" }}>\r\n                        {!listNull && rankedList.private ? (\r\n                            <VisibilityOffIcon\r\n                                onClick={() =>\r\n                                    rankedListDispatch({\r\n                                        type: ListReducerTypes.updatePrivate,\r\n                                        payload: { private: false },\r\n                                    })\r\n                                }\r\n                                style={{ cursor: \"pointer\", marginRight: \"10px\" }}\r\n                            />\r\n                        ) : (\r\n                            <VisibilityIcon\r\n                                onClick={() =>\r\n                                    rankedListDispatch({\r\n                                        type: ListReducerTypes.updatePrivate,\r\n                                        payload: { private: true },\r\n                                    })\r\n                                }\r\n                                style={{ cursor: \"pointer\", marginRight: \"10px\" }}\r\n                            />\r\n                        )}\r\n\r\n                        <DeleteIcon style={{ cursor: \"pointer\", marginRight: \"10px\" }} onClick={props.onDelete} />\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"col\"\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        overscrollBehaviorY: \"scroll\",\r\n                        maxWidth: \"100%\",\r\n                    }}\r\n                >\r\n                    {listNull ? (\r\n                        <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                    ) : rankedList.rankItems.length ? (\r\n                        <DragDropContext onDragEnd={onDragEnd} style={{ width: \"100%\" }}>\r\n                            <Droppable droppableId=\"list\" style={{ width: \"100%\" }}>\r\n                                {(provided) => {\r\n                                    return (\r\n                                        <div\r\n                                            style={{ width: \"100%\" }}\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                        >\r\n                                            {rankedList.rankItems.map((rItem, index) => (\r\n                                                <Draggable\r\n                                                    style={{ width: \"100%\" }}\r\n                                                    key={rItem.itemId.toString()}\r\n                                                    draggableId={rItem.itemId.toString()}\r\n                                                    index={index}\r\n                                                >\r\n                                                    {(provided) => (\r\n                                                        <RankItemCard\r\n                                                            isMain={true}\r\n                                                            rankItem={rItem}\r\n                                                            textTheme={textTheme}\r\n                                                            cardTheme={cardTheme}\r\n                                                            innerRef={provided.innerRef}\r\n                                                            provided={provided}\r\n                                                            onDelete={() => {\r\n                                                                rankedListDispatch({\r\n                                                                    type: ListReducerTypes.deleteItem,\r\n                                                                    payload: { index: index },\r\n                                                                });\r\n                                                            }}\r\n                                                            onEdit={() => {\r\n                                                                setEditIndex(index);\r\n                                                                setEditItem(rItem);\r\n                                                                setOpenEdit(true);\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            ))}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    );\r\n                                }}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n                    ) : (\r\n                        <h2 style={textTheme}>No items yet</h2>\r\n                    )}\r\n                </div>\r\n                {!listNull && rankedList.rankItems.length < 10 ? (\r\n                    <AddCircleIcon\r\n                        style={{ marginBottom: \"8px\", fontSize: \"40px\", cursor: \"pointer\" }}\r\n                        onClick={() => setOpenNew(true)}\r\n                    />\r\n                ) : (\r\n                    <i style={{ display: \"none\" }} />\r\n                )}\r\n\r\n                {editItem && editIndex !== null ? (\r\n                    <RankItemEdit\r\n                        rankItem={editItem}\r\n                        index={editIndex}\r\n                        handleClose={() => {\r\n                            setOpenEdit(false);\r\n                            setEditIndex(null);\r\n                            setEditItem(null);\r\n                        }}\r\n                        open={openEdit}\r\n                        onSave={(index, name, description, picture) => {\r\n                            rankedListDispatch({\r\n                                type: ListReducerTypes.updateItem,\r\n                                payload: { index: index, itemName: name, description: description, picture: picture },\r\n                            });\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <i style={{ display: \"none\" }} />\r\n                )}\r\n\r\n                <RankItemEdit\r\n                    isNew={true}\r\n                    handleClose={() => {\r\n                        setOpenNew(false);\r\n                        setEditIndex(null);\r\n                        setEditItem(null);\r\n                    }}\r\n                    open={openNew}\r\n                    onSave={(index, name, description, picture) => {\r\n                        rankedListDispatch({\r\n                            type: ListReducerTypes.createItem,\r\n                            payload: { itemName: name, description: description, picture: picture },\r\n                        });\r\n                    }}\r\n                />\r\n                <ErrorSnack\r\n                    message=\"Error Loading List\"\r\n                    open={apiError}\r\n                    handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n                />\r\n                <ErrorSnack\r\n                    message=\"List needs at least 1 item\"\r\n                    open={validList}\r\n                    handleClose={(event, reason) => closeErrorSB(event, reason, setValidList)}\r\n                />\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { Dialog, useTheme } from \"@material-ui/core\";\r\n\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport \"../App.css\";\r\n\r\n// open: bool\r\n// asyncTask: callback\r\n// onClose: callback\r\n// errorMessage: string\r\n// successMessage: string\r\nexport const LoadingDialog = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const executeTask = () => {\r\n        (async () => {\r\n            if (!props.open) {\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n            const [e, res] = await props.asyncTask();\r\n            console.log([e, res]);\r\n            setSuccess(!e);\r\n            if (!e) {\r\n                setTimeout(props.onClose, 1500);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    };\r\n\r\n    useEffect(executeTask, [props.open]);\r\n\r\n    return (\r\n        <Dialog onClose={props.onClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div className=\"col\" style={{ justifyContent: \"center\", alignItems: \"center\", padding: \"10px\" }}>\r\n                {loading ? (\r\n                    <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                ) : (\r\n                    <ResultDisplay\r\n                        success={success}\r\n                        successMessage={props.successMessage}\r\n                        errorMessage={props.errorMessage}\r\n                        executeTask={executeTask}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\n// success: bool\r\n// successMessage: string\r\n// errorMessage: string\r\n// executeTask: callback\r\nconst ResultDisplay = (props) => {\r\n    const textTheme = { ...getTextTheme(useTheme()), margin: \"0px\" };\r\n\r\n    if (props.success) {\r\n        return <h3 style={textTheme}>{props.successMessage}</h3>;\r\n    } else {\r\n        return (\r\n            <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n                <h3 style={textTheme}>{props.errorMessage}</h3>\r\n                <ActionButton onClick={props.executeTask} width=\"150px\" label=\"Try Again\" />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Avatar, Card, useTheme } from \"@material-ui/core\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { resetUserContext, UserContext } from \"../Contexts\";\r\nimport { appThemeConstants, getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport { tsToDelta } from \"../misc/Utils\";\r\nimport { UserListDialog } from \"./UserListDialog\";\r\nimport { UserPreviewTypes } from \"../api/UserPreviewRepo\";\r\nimport { likeList, likeRes } from \"../api/UserRepo\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport { RankedListView } from \"./RankedListView\";\r\nimport { CommentsDialog } from \"./CommentsDialog\";\r\nimport { RankedListEdit } from \"./RankedListEdit\";\r\nimport { deleteRankedList, updateRankedList } from \"../api/RankedListRepo\";\r\nimport { LoadingDialog } from \"./LoadingDialog\";\r\nimport \"../App.css\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\n\r\n// commentPreview: object\r\n// cardTheme: object\r\n// theme: object\r\n// onClick: callback\r\nexport const CommentPreview = (props) => {\r\n    return (\r\n        <Card style={props.cardStyle}>\r\n            <div className=\"col\">\r\n                <CardHeader\r\n                    isDark={props.isDark}\r\n                    userId={props.commentPreview.userId}\r\n                    name={props.commentPreview.username}\r\n                    profPic={props.commentPreview.profilePic}\r\n                    timeStamp={props.commentPreview.dateCreated}\r\n                />\r\n                <h3 style={{ ...props.textTheme, margin: \"4px\" }}>{props.commentPreview.comment}</h3>\r\n                <h4\r\n                    onClick={props.onClick}\r\n                    style={{\r\n                        ...props.textTheme,\r\n                        margin: \"4px\",\r\n                        textDecoration: \"underline\",\r\n                        cursor: \"pointer\",\r\n                        display: props.commentPreview.numComments <= 1 ? \"none\" : \"inline\",\r\n                    }}\r\n                >\r\n                    View all {props.commentPreview.numComments} comments\r\n                </h4>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\n// id: string\r\n// mainUser: object\r\n// textTheme: object\r\n// numLikes: number\r\n// isLiked: bool\r\n// numComments: number\r\nexport const CardLikeBar = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [openLikers, setOpenLikers] = useState(false);\r\n    const [openComments, setOpenComments] = useState(false);\r\n    const [liked, setLiked] = useState(props.isLiked);\r\n    const [numLikes, setNumLikes] = useState(props.numLikes);\r\n    const [apiError, setApiError] = useState(false);\r\n\r\n    const onLike = async () => {\r\n        setLoading(true);\r\n        const [e, res] = await likeList(props.id, props.mainUser.userToken);\r\n        setApiError(e);\r\n        if (e) {\r\n            setLoading(false);\r\n            return;\r\n        } else {\r\n            if (liked) {\r\n                setNumLikes(numLikes - 1);\r\n            } else {\r\n                setNumLikes(numLikes + 1);\r\n            }\r\n\r\n            setLiked(res === likeRes.liked);\r\n            props.mainUser.userDispatch({\r\n                type: UserReducerTypes.likeListAction,\r\n                payload: { hasLiked: res === likeRes.liked, targetId: props.id },\r\n            });\r\n\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const likeStyle = { color: \"red\", height: \"45px\", width: \"45px\", marginRight: \"6px\" };\r\n    return loading ? (\r\n        <ReactLoading type=\"bubbles\" color={appThemeConstants.hanPurple} />\r\n    ) : (\r\n        <div\r\n            className=\"row\"\r\n            style={{\r\n                margin: \"0px\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                paddingLeft: \"12px\",\r\n                paddingRight: \"12px\",\r\n                cursor: \"pointer\",\r\n            }}\r\n        >\r\n            <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                {liked ? (\r\n                    <FavoriteIcon onClick={onLike} style={likeStyle} />\r\n                ) : (\r\n                    <FavoriteBorderIcon onClick={onLike} style={likeStyle} />\r\n                )}\r\n                <h3 style={{ ...props.textTheme, fontSize: \"20px\" }} onClick={() => setOpenLikers(true)}>\r\n                    {numLikes} {numLikes === 1 ? \"like\" : \"likes\"}\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"row\" style={{ alignItems: \"center\" }} onClick={() => setOpenComments(true)}>\r\n                <CommentIcon style={{ height: \"25x\", width: \"25px\", marginRight: \"6px\" }} />\r\n                <h3 style={{ ...props.textTheme, fontSize: \"20px\" }}>\r\n                    {props.numComments} {props.numComments === 1 ? \"comment\" : \"comments\"}\r\n                </h3>\r\n            </div>\r\n\r\n            <UserListDialog\r\n                handleClose={() => setOpenLikers(false)}\r\n                open={openLikers}\r\n                title=\"Liked By\"\r\n                type={UserPreviewTypes.likersList}\r\n                name={props.id}\r\n            />\r\n\r\n            <CommentsDialog\r\n                open={openComments}\r\n                handleClose={() => setOpenComments(false)}\r\n                mainUser={props.mainUser}\r\n                listId={props.id}\r\n                userComments={false}\r\n            />\r\n            <ErrorSnack\r\n                open={apiError}\r\n                handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n                message=\"Error Liking\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n// ranking: number\r\n// itemName: string\r\n// textTheme: object\r\nexport const RankItemPreview = (props) => {\r\n    return (\r\n        <div className=\"row\" style={{ alignItems: \"center\", width: \"100%\", flexWrap: \"nowrap\" }}>\r\n            <Avatar\r\n                style={{ height: \"50px\", width: \"50px\", backgroundColor: appThemeConstants.lavender, margin: \"12px\" }}\r\n            >\r\n                <h3 style={{ fontFamily: appThemeConstants.fontFamily, color: \"white\", fontSize: \"26px\" }}>\r\n                    {props.ranking}\r\n                </h3>\r\n            </Avatar>\r\n            <h3\r\n                style={{\r\n                    ...props.textTheme,\r\n                    margin: \"0px\",\r\n                    marginLeft: \"2px\",\r\n                    fontSize: \"28px\",\r\n                    whiteSpace: \"nowrap\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                }}\r\n            >\r\n                {props.itemName}\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n// name: string\r\n// userId: number\r\n// profPic: string\r\n// timeStamp: number\r\n// isDark: bool\r\n// full: bool\r\nexport const CardHeader = (props) => {\r\n    const history = useHistory();\r\n    const secondTextTheme = {\r\n        color: props.isDark ? \"white\" : \"#666666\",\r\n        fontFamily: appThemeConstants.fontFamily,\r\n    };\r\n    return (\r\n        <div\r\n            className=\"row\"\r\n            style={\r\n                props.full\r\n                    ? {\r\n                          justifyContent: \"space-between\",\r\n                          width: \"100%\",\r\n                          paddingLeft: \"10px\",\r\n                          paddingRight: \"10px\",\r\n                          marginBottom: \"4px\",\r\n                      }\r\n                    : { justifyContent: \"space-between\" }\r\n            }\r\n        >\r\n            <div\r\n                className=\"row\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => history.push(\"/main/profile/\" + props.userId)}\r\n            >\r\n                <Avatar src={props.profPic} style={{ height: \"50px\", width: \"50px\", marginRight: \"12px\" }}>\r\n                    <AccountCircleIcon style={{ height: \"100%\", width: \"100%\" }} />\r\n                </Avatar>\r\n                <h3 style={secondTextTheme}>{props.name}</h3>\r\n            </div>\r\n            <h3 style={{ ...secondTextTheme, marginRight: \"4px\" }}>{tsToDelta(props.timeStamp)}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n// rankedList: object\r\n// onUpdate: callback\r\nexport const RankedListCard = (props) => {\r\n    const currentTheme = useTheme();\r\n    const cardStyle = getCardStyle(currentTheme);\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const mainUser = useContext(UserContext);\r\n\r\n    const [edited, setEdited] = useState(false);\r\n    const [deleted, setDeleted] = useState(false);\r\n    const [openList, setOpenList] = useState(false);\r\n    const [openEdit, setOpenEdit] = useState(false);\r\n    const [openComments, setOpenComments] = useState(false);\r\n    const [savedList, setSavedList] = useState(null);\r\n\r\n    const deleteList = async () => {\r\n        setOpenEdit(false);\r\n        return await deleteRankedList(props.rankedList.listId, mainUser.userToken);\r\n    };\r\n\r\n    const editList = async () => {\r\n        console.log(savedList);\r\n        if (savedList && savedList.rankItems.length >= 1) {\r\n            return await updateRankedList(savedList, props.rankedList.listId, mainUser.userToken);\r\n        } else {\r\n            return [false, {}];\r\n        }\r\n    };\r\n\r\n    const onOpen = () => setOpenList(true);\r\n\r\n    if (!mainUser.user) {\r\n        resetUserContext(mainUser);\r\n        return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...cardStyle,\r\n                width: \"400px\",\r\n                maxWidth: \"98%\",\r\n                paddingLeft: \"10px\",\r\n                paddingRight: \"10px\",\r\n                paddingTop: \"10px\",\r\n                marginBottom: \"18px\",\r\n            }}\r\n        >\r\n            <div className=\"col\" style={{ width: \"100%\" }}>\r\n                <CardHeader\r\n                    name={props.rankedList.username}\r\n                    userId={props.rankedList.userId}\r\n                    profPic={props.rankedList.profilePic}\r\n                    timeStamp={props.rankedList.dateCreated}\r\n                    isDark={currentTheme.palette.type === \"dark\"}\r\n                />\r\n                <h2 style={{ ...textTheme, marginTop: \"0px\", cursor: \"pointer\" }} onClick={onOpen}>\r\n                    {props.rankedList.title}\r\n                </h2>\r\n                <img\r\n                    style={{ borderRadius: \"15px\", width: \"375px\", maxWidth: \"98%\", alignSelf: \"center\" }}\r\n                    src={props.rankedList.picture}\r\n                />\r\n                {props.rankedList.rankItems.map((rItem) => (\r\n                    <RankItemPreview\r\n                        textTheme={textTheme}\r\n                        ranking={rItem.ranking}\r\n                        itemName={rItem.itemName}\r\n                        key={`rank_${rItem.ranking}`}\r\n                    />\r\n                ))}\r\n                <h4\r\n                    onClick={onOpen}\r\n                    style={{\r\n                        ...textTheme,\r\n                        margin: \"0px\",\r\n                        textDecoration: \"underline\",\r\n                        cursor: \"pointer\",\r\n                        display: props.rankedList.numItems <= 3 ? \"none\" : \"inline\",\r\n                    }}\r\n                >\r\n                    View {props.rankedList.numItems - props.rankedList.rankItems.length} more items\r\n                </h4>\r\n\r\n                <CardLikeBar\r\n                    numComments={props.rankedList.numComments}\r\n                    numLikes={props.rankedList.numLikes}\r\n                    textTheme={textTheme}\r\n                    id={props.rankedList.listId}\r\n                    isLiked={mainUser.user.likedLists.includes(props.rankedList.listId)}\r\n                    mainUser={mainUser}\r\n                />\r\n\r\n                {props.rankedList[\"num_comments\"] >= 1 ? (\r\n                    <CommentPreview\r\n                        onClick={() => setOpenComments(true)}\r\n                        commentPreview={{\r\n                            ...props.rankedList.commentPreview,\r\n                            numComments: props.rankedList.numComments,\r\n                        }}\r\n                        isDark={currentTheme.palette.type === \"dark\"}\r\n                        textTheme={textTheme}\r\n                        cardStyle={{\r\n                            ...cardStyle,\r\n                            margin: \"0px\",\r\n                            marginBottom: \"10px\",\r\n                            width: \"100%\",\r\n                            paddingTop: \"8px\",\r\n                            paddingLeft: \"8px\",\r\n                            paddingRight: \"8px\",\r\n                            backgroundColor:\r\n                                currentTheme.palette.type === \"dark\"\r\n                                    ? appThemeConstants.hanPurple\r\n                                    : appThemeConstants.palePurple,\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <i style={{ display: \"none\" }} />\r\n                )}\r\n\r\n                <RankedListView\r\n                    open={openList}\r\n                    listId={props.rankedList.listId}\r\n                    onClose={() => setOpenList(false)}\r\n                    mainUser={mainUser}\r\n                    name={props.rankedList.username}\r\n                    profPic={props.rankedList.profilePic}\r\n                    onEdit={() => {\r\n                        setOpenList(false);\r\n                        setOpenEdit(true);\r\n                    }}\r\n                />\r\n                <RankedListEdit\r\n                    open={openEdit}\r\n                    listId={props.rankedList.listId}\r\n                    onClose={() => setOpenEdit(false)}\r\n                    onDelete={() => setDeleted(true)}\r\n                    onSave={(rankedList) => {\r\n                        setSavedList(rankedList);\r\n                        setEdited(true);\r\n                        setDeleted(false);\r\n                    }}\r\n                    mainUser={mainUser}\r\n                    isNew={false}\r\n                />\r\n                <LoadingDialog\r\n                    open={(edited || deleted) && !(edited && deleted)}\r\n                    asyncTask={edited ? editList : deleteList}\r\n                    onClose={() => {\r\n                        if (edited) {\r\n                            setEdited(false);\r\n                        } else if (deleted) {\r\n                            setDeleted(false);\r\n                        }\r\n\r\n                        props.onUpdate();\r\n                    }}\r\n                    errorMessage={\"Unable to \" + (edited ? \"edit\" : deleted ? \"delete\" : \"\") + \" list\"}\r\n                    successMessage={(edited ? \"Edited\" : deleted ? \"Deleted\" : \"\") + \" list!\"}\r\n                />\r\n                <CommentsDialog\r\n                    open={openComments}\r\n                    handleClose={() => setOpenComments(false)}\r\n                    mainUser={mainUser}\r\n                    listId={props.rankedList.listId}\r\n                    userComments={false}\r\n                />\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Card, Menu, MenuItem, TextField } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport ReactLoading from \"react-loading\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\n\r\nimport { CardHeader } from \"./RankedListCard\";\r\nimport { createComment, deleteComment, likeComment } from \"../api/CommentRepo\";\r\nimport { fieldTheme } from \"./Login\";\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport { LoadingDialog } from \"./LoadingDialog\";\r\nimport { likeRes } from \"../api/UserRepo\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\nimport { getRankedList } from \"../api/RankedListRepo\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport \"../App.css\";\r\n\r\nlet commentEdit = \"\";\r\n\r\n// id: string\r\n// mainUser: object\r\n// textTheme: object\r\n// numLikes: number\r\n// isLiked: bool\r\nconst CommentLikeBar = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [liked, setLiked] = useState(props.isLiked);\r\n    const [numLikes, setNumLikes] = useState(props.numLikes);\r\n    const [apiError, setApiError] = useState(false);\r\n\r\n    const onLike = async () => {\r\n        setLoading(true);\r\n        const [e, res] = await likeComment(props.id, props.mainUser.userToken);\r\n        setApiError(e);\r\n        if (e) {\r\n            setLoading(false);\r\n            return;\r\n        } else {\r\n            if (liked) {\r\n                setNumLikes(numLikes - 1);\r\n            } else {\r\n                setNumLikes(numLikes + 1);\r\n            }\r\n\r\n            setLiked(res === likeRes.liked);\r\n\r\n            props.mainUser.userDispatch({\r\n                type: UserReducerTypes.likeCommentAction,\r\n                payload: { hasLiked: res === likeRes.liked, targetId: props.id },\r\n            });\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const likeStyle = { color: \"red\", height: \"45px\", width: \"45px\" };\r\n\r\n    return loading ? (\r\n        <ReactLoading type=\"bubbles\" color={appThemeConstants.hanPurple} />\r\n    ) : (\r\n        <div\r\n            className=\"row\"\r\n            style={{\r\n                margin: \"0px\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                paddingLeft: \"12px\",\r\n                paddingRight: \"12px\",\r\n                cursor: \"pointer\",\r\n            }}\r\n        >\r\n            {liked ? (\r\n                <FavoriteIcon onClick={onLike} style={likeStyle} />\r\n            ) : (\r\n                <FavoriteBorderIcon onClick={onLike} style={likeStyle} />\r\n            )}\r\n            <h3 style={{ ...props.textTheme, fontSize: \"20px\" }}>{numLikes} likes</h3>\r\n            <ErrorSnack\r\n                handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n                open={apiError}\r\n                message=\"Error Liking Comment\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n// comment: object\r\n// mainUser: object\r\n// cardTheme: object\r\n// textTheme: object\r\n// isDark: bool\r\n// toList: bool\r\n// onListNav: callback\r\n// onUpdate: callback\r\nexport const CommentCard = (props) => {\r\n    const { comment } = props;\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [editing, setEditing] = useState(false);\r\n    const [commentError, setCommentError] = useState(false);\r\n\r\n    const [submitEdit, setSubmitEdit] = useState(false);\r\n    const [deletedComment, setDeletedComment] = useState(false);\r\n\r\n    const delComment = async () => {\r\n        return await deleteComment(comment.commentId, props.mainUser.userToken);\r\n    };\r\n\r\n    const editComment = async () => {\r\n        return await createComment(comment.commentId, commentEdit, props.mainUser.userToken, true);\r\n    };\r\n    return (\r\n        <Card style={{ ...props.cardTheme, width: \"400px\", marginTop: \"0px\", marginBottom: \"8px\", maxWidth: \"94%\" }}>\r\n            <div\r\n                className=\"col\"\r\n                style={{ width: \"100%\", paddingTop: \"10px\", paddingLeft: \"10px\", paddingRight: \"10px\" }}\r\n            >\r\n                {props.mainUser.user.userId === comment.userId ? (\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ width: \"100%\", alignItems: \"center\", justifyContent: \"space-between\" }}\r\n                    >\r\n                        <div style={{ width: \"93%\" }}>\r\n                            <CardHeader\r\n                                name={comment.userName}\r\n                                userId={comment.userId}\r\n                                profPic={comment.profilePic}\r\n                                timeStamp={comment.dateCreated}\r\n                                isDark={props.isDark}\r\n                            />\r\n                        </div>\r\n\r\n                        <MoreVertIcon\r\n                            style={{ padding: \"0px\", margin: \"0px\", fontSize: \"20px\", cursor: \"pointer\" }}\r\n                            onClick={(event) => setAnchorEl(event.target)}\r\n                        />\r\n                        <Menu\r\n                            id=\"simple-menu\"\r\n                            anchorEl={anchorEl}\r\n                            keepMounted\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                        >\r\n                            <MenuItem\r\n                                onClick={() => {\r\n                                    setAnchorEl(null);\r\n                                    setEditing(true);\r\n                                }}\r\n                            >\r\n                                Edit\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                onClick={() => {\r\n                                    setAnchorEl(null);\r\n                                    setDeletedComment(true);\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </MenuItem>\r\n                            {props.toList ? (\r\n                                <MenuItem\r\n                                    onClick={() => {\r\n                                        (async () => {\r\n                                            const [e, rList] = await getRankedList(comment.listId);\r\n                                            if (!e) {\r\n                                                props.onListNav(rList.listId, rList.profilePic, rList.username);\r\n                                            }\r\n                                        })();\r\n                                        setAnchorEl(null);\r\n                                    }}\r\n                                >\r\n                                    To List\r\n                                </MenuItem>\r\n                            ) : (\r\n                                <i style={{ display: \"none\" }} />\r\n                            )}\r\n                        </Menu>\r\n                    </div>\r\n                ) : (\r\n                    <CardHeader\r\n                        name={comment.username}\r\n                        userId={comment.userId}\r\n                        profPic={comment.profilePic}\r\n                        timeStamp={comment.dateCreated}\r\n                        isDark={props.isDark}\r\n                    />\r\n                )}\r\n\r\n                {editing ? (\r\n                    <TextField\r\n                        defaultValue={comment.comment}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === \"Enter\") {\r\n                                if (!commentEdit) {\r\n                                    setCommentError(true);\r\n                                    return;\r\n                                }\r\n\r\n                                setEditing(false);\r\n                                setSubmitEdit(true);\r\n                                event.preventDefault();\r\n                            }\r\n                        }}\r\n                        style={fieldTheme}\r\n                        label=\"Comment\"\r\n                        multiline\r\n                        id=\"comment-field\"\r\n                        variant=\"outlined\"\r\n                        error={commentError}\r\n                        helperText={commentError ? \"Comment cannot be empty\" : \"\"}\r\n                        onChange={(event) => {\r\n                            commentEdit = event.target.value;\r\n                            setCommentError(false);\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <h3 style={{ ...props.textTheme, marginLeft: \"10px\", marginRight: \"10px\", marginBottom: \"0px\" }}>\r\n                        {comment.comment}\r\n                    </h3>\r\n                )}\r\n                <CommentLikeBar\r\n                    id={comment.commentId}\r\n                    mainUser={props.mainUser}\r\n                    textTheme={props.textTheme}\r\n                    numLikes={comment.numLikes}\r\n                    isList={false}\r\n                    isLiked={props.mainUser.user.likedComments.includes(comment.commentId)}\r\n                />\r\n\r\n                <LoadingDialog\r\n                    open={(submitEdit || deletedComment) && !(submitEdit && deletedComment)}\r\n                    asyncTask={submitEdit ? editComment : delComment}\r\n                    onClose={() => {\r\n                        if (submitEdit) {\r\n                            setSubmitEdit(false);\r\n                        } else if (deleteComment) {\r\n                            setDeletedComment(false);\r\n                        }\r\n\r\n                        props.onUpdate();\r\n                    }}\r\n                    errorMessage={\"Failed to \" + (submitEdit ? \"edit\" : \"delete\") + \" comment\"}\r\n                    successMessage={(submitEdit ? \"Edited\" : \"Deleted\") + \" comment\"}\r\n                />\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Dialog, InputAdornment, TextField, useTheme } from \"@material-ui/core\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { SortOptions } from \"../misc/Utils\";\r\nimport { BackButton } from \"./BackButton\";\r\nimport { appThemeConstants, getCardStyle, getTextTheme } from \"../misc/AppTheme\";\r\nimport { SortMenu } from \"./SearchUsers\";\r\nimport { createComment, getComments, getUserComments } from \"../api/CommentRepo\";\r\nimport { CommentCard } from \"./CommentCard\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { RankedListView } from \"./RankedListView\";\r\nimport { RankedListEdit } from \"./RankedListEdit\";\r\nimport { deleteRankedList, updateRankedList } from \"../api/RankedListRepo\";\r\nimport { fieldTheme } from \"./Login\";\r\nimport { LoadingDialog } from \"./LoadingDialog\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\nimport \"../App.css\";\r\n\r\nlet page = 0;\r\n\r\nlet commentContent = \"\";\r\n\r\n// open: bool\r\n// handleClose: callback\r\n// mainUser: object\r\n// listId: props\r\n// userComments: bool\r\nexport const CommentsDialog = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const cardTheme = getCardStyle(currentTheme);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [pageLoad, setPageLoad] = useState(false);\r\n    const [commentsList, setCommentsList] = useState([]);\r\n    const [hitMax, setHitMax] = useState(false);\r\n    const [sort, setSort] = useState(SortOptions.likesDesc);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [id, setId] = useState(null);\r\n    const [profPic, setProfPic] = useState(null);\r\n    const [name, setName] = useState(null);\r\n    const [listOpen, setListOpen] = useState(false);\r\n    const [editOpen, setEditOpen] = useState(false);\r\n\r\n    const [commented, setCommented] = useState(false);\r\n    const [commentEmpty, setCommentEmpty] = useState(false);\r\n\r\n    const [apiError, setApiError] = useState(false);\r\n\r\n    const sendComment = async () => {\r\n        return await createComment(props.listId, commentContent, props.mainUser.userToken, false);\r\n    };\r\n\r\n    const preSend = () => {\r\n        if (!commentContent) {\r\n            setCommentEmpty(true);\r\n            return;\r\n        }\r\n\r\n        setCommentEmpty(false);\r\n        setCommented(true);\r\n    };\r\n\r\n    const onListNav = (toId, pic, name) => {\r\n        setId(toId);\r\n        setProfPic(pic);\r\n        setName(name);\r\n        setListOpen(true);\r\n    };\r\n\r\n    const getCommentData = async (refresh) => {\r\n        if (!props.open) {\r\n            return;\r\n        }\r\n        setLoading(true);\r\n        page = 0;\r\n        setCommentsList([]);\r\n        const [e, lastPage, res] = props.userComments\r\n            ? await getUserComments(page, sort, props.mainUser.userToken, refresh)\r\n            : await getComments(props.listId, page, sort, refresh);\r\n\r\n        setHitMax(lastPage);\r\n        setLoading(false);\r\n        setApiError(e);\r\n        if (!e) {\r\n            setCommentsList([...res]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getCommentData(false);\r\n    }, [props.open, sort]);\r\n\r\n    useEffect(() => {\r\n        getCommentData(true);\r\n    }, [refresh]);\r\n\r\n    const onPaginate = async () => {\r\n        page += 1;\r\n        setPageLoad(true);\r\n        const [e, lastPage, res] = props.userComments\r\n            ? await getUserComments(page, sort, props.mainUser.userToken, refresh)\r\n            : await getComments(props.listId, page, sort, refresh);\r\n        setHitMax(lastPage);\r\n        setPageLoad(false);\r\n        setApiError(e);\r\n        if (!e) {\r\n            setCommentsList([...commentsList, ...res]);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n                <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={props.handleClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div\r\n                className=\"col\"\r\n                style={{\r\n                    backgroundColor: currentTheme.palette.background.default,\r\n                    alignItems: \"center\",\r\n                    overscrollBehaviorY: \"none\",\r\n                }}\r\n            >\r\n                <div\r\n                    className=\"row\"\r\n                    style={{\r\n                        justifyContent: \"space-between\",\r\n                        width: \"100%\",\r\n                        alignItems: \"center\",\r\n                        alignSelf: \"start\",\r\n                        maxWidth: \"100%\",\r\n                        position: \"sticky\",\r\n                        top: \"0\",\r\n                        zIndex: \"1\",\r\n                        backgroundColor: currentTheme.palette.background.default,\r\n                    }}\r\n                >\r\n                    <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                        <BackButton onClick={props.handleClose} />\r\n                        <h1 style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}>\r\n                            {props.userComments ? \"Your Comments\" : \"Comments\"}\r\n                        </h1>\r\n                    </div>\r\n                    <div className=\"row\" style={{ alignItems: \"center\", marginRight: \"6px\" }}>\r\n                        <RefreshIcon style={{ cursor: \"pointer\" }} onClick={() => setRefresh(!refresh)} />\r\n                        <SortMenu onSort={(sortOption) => setSort(sortOption)} />\r\n                    </div>\r\n                </div>\r\n\r\n                {commentsList.length >= 1 ? (\r\n                    <div className=\"col\" style={{ alignItems: \"center\", width: \"100%\" }}>\r\n                        {commentsList.map((uComment) => (\r\n                            <CommentCard\r\n                                onUpdate={() => setRefresh(!refresh)}\r\n                                onListNav={onListNav}\r\n                                toList={props.userComments}\r\n                                key={uComment.commentId}\r\n                                comment={uComment}\r\n                                mainUser={props.mainUser}\r\n                                cardTheme={cardTheme}\r\n                                textTheme={textTheme}\r\n                                isDark={currentTheme.palette.type === \"dark\"}\r\n                            />\r\n                        ))}\r\n                        {hitMax ? (\r\n                            <i style={{ display: \"none\" }} />\r\n                        ) : pageLoad ? (\r\n                            <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                        ) : (\r\n                            <ActionButton label=\"Load More\" width=\"145px\" onClick={onPaginate} />\r\n                        )}\r\n                    </div>\r\n                ) : (\r\n                    <h2 style={props.textTheme}>No comments found</h2>\r\n                )}\r\n                {props.userComments && id ? (\r\n                    <RankedListView\r\n                        listId={id}\r\n                        open={listOpen}\r\n                        onClose={() => setListOpen(false)}\r\n                        mainUser={props.mainUser}\r\n                        profPic={profPic}\r\n                        name={name}\r\n                        onEdit={() => {\r\n                            setListOpen(false);\r\n                            setEditOpen(true);\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <i style={{ display: \"none\" }} />\r\n                )}\r\n\r\n                <RankedListEdit\r\n                    open={editOpen}\r\n                    isNew={false}\r\n                    listId={id}\r\n                    mainUser={props.mainUser}\r\n                    onClose={() => setEditOpen(false)}\r\n                    onSave={(rankedList) => {\r\n                        (async () => {\r\n                            await updateRankedList(rankedList, id, props.mainUser.userToken);\r\n                        })();\r\n                    }}\r\n                    onDelete={() => async () => await deleteRankedList(id, props.mainUser.userToken)}\r\n                />\r\n\r\n                {props.userComments ? (\r\n                    <i style={{ display: \"none\" }} />\r\n                ) : (\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            justifyContent: \"space-evenly\",\r\n                            width: \"100%\",\r\n                            alignItems: \"center\",\r\n                            alignSelf: \"center\",\r\n                            maxWidth: \"100%\",\r\n                            position: \"sticky\",\r\n                            bottom: \"0\",\r\n                            zIndex: \"1\",\r\n                            backgroundColor: currentTheme.palette.background.default,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            onKeyPress={(event) => {\r\n                                if (event.key === \"Enter\") {\r\n                                    preSend();\r\n                                    event.preventDefault();\r\n                                }\r\n                            }}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <SendIcon\r\n                                            onClick={() => preSend()}\r\n                                            style={{\r\n                                                cursor: \"pointer\",\r\n                                                color:\r\n                                                    currentTheme.palette.type === \"dark\"\r\n                                                        ? appThemeConstants.lavender\r\n                                                        : appThemeConstants.hanPurple,\r\n                                            }}\r\n                                        />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            style={fieldTheme}\r\n                            label=\"Comment\"\r\n                            multiline\r\n                            id=\"comment-field\"\r\n                            variant=\"outlined\"\r\n                            error={commentEmpty}\r\n                            helperText={commentEmpty ? \"Comment cannot be empty\" : \"\"}\r\n                            onChange={(event) => (commentContent = event.target.value)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                <LoadingDialog\r\n                    open={commented}\r\n                    asyncTask={sendComment}\r\n                    onClose={() => {\r\n                        setCommented(false);\r\n                        setRefresh(!refresh);\r\n                    }}\r\n                    errorMessage=\"Failed to send comment\"\r\n                    successMessage=\"Successfully commented\"\r\n                />\r\n                <ErrorSnack\r\n                    message=\"Error Loading Comments\"\r\n                    handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n                    open={apiError}\r\n                />\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Avatar, Card, CardContent, makeStyles, useTheme } from \"@material-ui/core\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { BioField } from \"./SignUp\";\r\nimport { UserListDialog } from \"./UserListDialog\";\r\nimport { UserPreviewTypes } from \"../api/UserPreviewRepo\";\r\nimport { ProfilePicChooser } from \"./ProfPicChooser\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { resetUserContext, UserContext } from \"../Contexts\";\r\nimport { getCardStyle, getTextTheme, appThemeConstants } from \"../misc/AppTheme\";\r\nimport { followUser, updateBio } from \"../api/UserRepo\";\r\nimport { UserReducerTypes } from \"../reducers/UserReducer\";\r\nimport { CommentsDialog } from \"./CommentsDialog\";\r\nimport { tsToDate } from \"../misc/Utils\";\r\nimport \"../App.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatar: {\r\n        cursor: \"pointer\",\r\n        height: \"200px\",\r\n        width: \"200px\",\r\n    },\r\n    avIcon: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n}));\r\n\r\n//onClick: callback\r\n//label: string\r\n//stat: number\r\n//textTheme: object\r\nconst UserStat = (props) => {\r\n    const { onClick } = props;\r\n    return (\r\n        <div\r\n            className=\"col\"\r\n            style={{\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                margin: \"10px\",\r\n                cursor: onClick ? \"pointer\" : \"auto\",\r\n            }}\r\n            onClick={onClick}\r\n        >\r\n            <h2 style={props.textTheme}>{props.stat}</h2>\r\n            <h3 style={props.textTheme}>{props.label}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n//isFollowing: bool\r\n//mainUser: UserContext\r\n//userId: string\r\nconst FollowButton = (props) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [following, setFollowing] = useState(props.isFollowing);\r\n    const mainUser = props.mainUser;\r\n    return loading ? (\r\n        <ReactLoading type=\"bubbles\" color={appThemeConstants.hanPurple} />\r\n    ) : (\r\n        <ActionButton\r\n            onClick={async () => {\r\n                setLoading(true);\r\n                const [e, res] = await followUser(props.userId, mainUser.userToken);\r\n                if (e) {\r\n                    setLoading(false);\r\n                    return;\r\n                } else {\r\n                    setFollowing(res === \"FOLLOW\");\r\n                    mainUser.userDispatch({\r\n                        type: UserReducerTypes.followUserAction,\r\n                        payload: { hasFollowed: res === \"FOLLOW\", targetId: props.userId },\r\n                    });\r\n                    setLoading(false);\r\n                }\r\n            }}\r\n            width=\"400px\"\r\n            label={following ? \"Unfollow\" : \"Follow\"}\r\n        />\r\n    );\r\n};\r\n\r\nlet bioEdit = \"\";\r\n\r\n//bio: string\r\n//date: object\r\n//textTheme: object\r\n//isMain: bool\r\nconst UserBio = (props) => {\r\n    const { userDispatch, userToken } = useContext(UserContext);\r\n    const [editing, setEditing] = useState(false);\r\n    const [bioError, setError] = useState(false);\r\n\r\n    return (\r\n        <div className=\"col\" style={{ alignSelf: \"start\", marginLeft: \"10px\", marginRight: \"10px\", width: \"100%\" }}>\r\n            <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                <h1 style={{ ...props.textTheme, textAlign: \"start\" }}>Bio</h1>\r\n                <EditIcon\r\n                    onClick={() => {\r\n                        if (props.isMain && !editing) {\r\n                            setEditing(true);\r\n                        }\r\n                    }}\r\n                    style={{ marginLeft: \"12px\", cursor: \"pointer\", display: props.isMain ? \"inline\" : \"none\" }}\r\n                />\r\n            </div>\r\n            {editing ? (\r\n                <BioField\r\n                    default={props.bio}\r\n                    onChange={(event) => (bioEdit = event.target.value)}\r\n                    onEnter={() => {\r\n                        if (bioEdit === \"\") {\r\n                            setError(true);\r\n                            setTimeout(() => {\r\n                                setError(false);\r\n                            }, 2000);\r\n                            return;\r\n                        }\r\n\r\n                        (async () => {\r\n                            const res = await updateBio(bioEdit, userToken);\r\n                            if (res[0]) {\r\n                                setError(true);\r\n                                setTimeout(() => {\r\n                                    setError(false);\r\n                                }, 2000);\r\n                            } else {\r\n                                userDispatch({ type: UserReducerTypes.updateBioAction, payload: { bio: bioEdit } });\r\n                                setEditing(false);\r\n                            }\r\n                        })();\r\n                    }}\r\n                    error={bioError}\r\n                />\r\n            ) : (\r\n                <h3 style={{ ...props.textTheme, textAlign: \"start\" }}>\r\n                    {!props.bio\r\n                        ? props.isMain\r\n                            ? \"Set a bio to highlight your interests\"\r\n                            : \"This user does not have a bio\"\r\n                        : props.bio}\r\n                </h3>\r\n            )}\r\n\r\n            <h1 style={{ ...props.textTheme, textAlign: \"start\" }}>Date Created</h1>\r\n            <h3 style={{ ...props.textTheme, textAlign: \"start\" }}>{tsToDate(props.date)}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n//isMain: bool\r\n//user: object\r\n//onLikeClick: callback\r\n//onListClick: callback\r\nexport const UserInfo = (props) => {\r\n    const mainUser = useContext(UserContext);\r\n    const classes = useStyles();\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n\r\n    const [profPickerOpen, setProfPickerOpen] = useState(false);\r\n    const [followersOpen, setFollowersOpen] = useState(false);\r\n    const [followingOpen, setFollowingOpen] = useState(false);\r\n    const [userCommentsOpen, setUserCommentsOpen] = useState(false);\r\n\r\n    let userStats = [];\r\n    let user = props.isMain ? mainUser.user : props.user;\r\n\r\n    if (!mainUser.user) {\r\n        resetUserContext(mainUser);\r\n        return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n    }\r\n\r\n    let avatarSrc = user.profilePic;\r\n\r\n    userStats.push(\r\n        {\r\n            onClick: null,\r\n            label: \"Rank Points\",\r\n            stat: user.rankPoints,\r\n        },\r\n        {\r\n            onClick: props.onListClick,\r\n            label: \"Rank Lists\",\r\n            stat: user.numLists,\r\n        },\r\n        {\r\n            onClick: () => setFollowersOpen(true),\r\n            label: \"Followers\",\r\n            stat: user.numFollowers,\r\n        },\r\n        {\r\n            onClick: () => setFollowingOpen(true),\r\n            label: \"Following\",\r\n            stat: user.numFollowing,\r\n        }\r\n    );\r\n\r\n    if (props.isMain) {\r\n        userStats.push(\r\n            {\r\n                onClick: () => setUserCommentsOpen(true),\r\n                label: \"Comments\",\r\n                stat: user.numComments,\r\n            },\r\n            {\r\n                onClick: props.onLikeClick,\r\n                label: \"Liked Lists\",\r\n                stat: user.likedLists.length,\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                ...getCardStyle(currentTheme),\r\n                width: \"850px\",\r\n                maxWidth: \"100%\",\r\n            }}\r\n        >\r\n            <CardContent className=\"col\" style={{ alignItems: \"center\" }}>\r\n                <h1 style={textTheme}>{user.username}</h1>\r\n                <div className=\"row\" style={{ justifyContent: \"space-around\", alignItems: \"center\", width: \"100%\" }}>\r\n                    <Avatar\r\n                        src={avatarSrc}\r\n                        className={classes.avatar}\r\n                        onClick={() => {\r\n                            if (props.isMain) {\r\n                                setProfPickerOpen(true);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <AccountCircleIcon className={classes.avIcon} />\r\n                    </Avatar>\r\n                    <div className=\"row\" style={{ flexWrap: \"wrap\", justifyContent: \"space-evenly\" }}>\r\n                        {userStats.map((userStat) => (\r\n                            <UserStat\r\n                                onClick={userStat.onClick}\r\n                                stat={userStat.stat}\r\n                                label={userStat.label}\r\n                                key={userStat.label}\r\n                                textTheme={textTheme}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <UserBio isMain={props.isMain} textTheme={textTheme} bio={user[\"bio\"]} date={user.dateCreated} />\r\n                {props.isMain ? (\r\n                    <i style={{ display: \"none\" }} />\r\n                ) : (\r\n                    <FollowButton\r\n                        mainUser={mainUser}\r\n                        name={user.username}\r\n                        isFollowing={mainUser.user.following.includes(user.userId)}\r\n                        userId={user.userId}\r\n                    />\r\n                )}\r\n\r\n                <UserListDialog\r\n                    open={followersOpen}\r\n                    handleClose={() => setFollowersOpen(false)}\r\n                    title={user.username + \"'s Followers\"}\r\n                    type={UserPreviewTypes.followersList}\r\n                    name={user.userId}\r\n                />\r\n                <UserListDialog\r\n                    open={followingOpen}\r\n                    handleClose={() => setFollowingOpen(false)}\r\n                    title={user.username + \"'s Following\"}\r\n                    type={UserPreviewTypes.followingList}\r\n                    name={user.userId}\r\n                />\r\n\r\n                <CommentsDialog\r\n                    open={userCommentsOpen}\r\n                    handleClose={() => setUserCommentsOpen(false)}\r\n                    mainUser={mainUser}\r\n                    userComments={true}\r\n                />\r\n                <ProfilePicChooser open={profPickerOpen} handleClose={() => setProfPickerOpen(false)} />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport ReactLoading from \"react-loading\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nimport { getRankedListPreview } from \"../api/RankedListPreviewRepo\";\r\nimport { RankedListCard } from \"./RankedListCard\";\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport { SortMenu } from \"./SearchUsers\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\nimport { getSort, saveSort } from \"../misc/PrefStore\";\r\nimport \"./Mason.css\";\r\n\r\n\r\nlet page = 0;\r\n\r\n// sort: int\r\n// userId: string\r\n// token: string\r\n// query: string\r\n// refresh: bool\r\n// emptyMessage: string\r\n// listType: string\r\n// textTheme: object\r\n// onUpdate: callback\r\nexport const GenericList = (props) => {\r\n    const [rankedLists, setRankedLists] = useState([]);\r\n    const [hitMax, setHitMax] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [apiError, setApiError] = useState(false);\r\n    const breakPoints = { default: 3 };\r\n    const isSmall = useMediaQuery(\"(max-width:700px)\");\r\n    const isLarge = useMediaQuery(\"(min-width:1100px)\");\r\n\r\n    if (isSmall) {\r\n        breakPoints.default = 1;\r\n    } else if (isLarge) {\r\n        breakPoints.default = 3;\r\n    } else {\r\n        breakPoints.default = 2;\r\n    }\r\n\r\n    const onPaginate = () => {\r\n        (async () => {\r\n            page += 1;\r\n\r\n            const [e, lastPage, res] = await getRankedListPreview(\r\n                getParams(page, props.sort, props.userId, props.token, props.query, props.refresh, props.listType)\r\n            );\r\n            setHitMax(lastPage);\r\n            setApiError(e);\r\n            if (!e) {\r\n                setRankedLists([...rankedLists, ...res]);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const getListPreviews = async (refresh) => {\r\n        setLoading(true);\r\n        page = 0;\r\n        setRankedLists([]);\r\n        const [e, lastPage, res] = await getRankedListPreview(\r\n            getParams(page, props.sort, props.userId, props.token, props.query, refresh, props.listType)\r\n        );\r\n        setHitMax(lastPage);\r\n        setApiError(e);\r\n        if (!e) {\r\n            setRankedLists([...res]);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getListPreviews(false);\r\n    }, [props.query, props.sort, props.listType]);\r\n    \r\n    useEffect(() => {\r\n        getListPreviews(true);\r\n    }, [props.refresh]);\r\n\r\n    if (loading) {\r\n        return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n    }\r\n\r\n    return rankedLists.length ? (\r\n        <div>\r\n            <InfiniteScroll\r\n                dataLength={rankedLists.length}\r\n                next={onPaginate}\r\n                hasMore={!hitMax}\r\n                loader={<ReactLoading type=\"cylon\" color={appThemeConstants.hanPurple} />}\r\n            >\r\n                <Masonry\r\n                    breakpointCols={\r\n                        rankedLists.length <= 2 && !isSmall ? { ...breakPoints, default: rankedLists.length } : breakPoints\r\n                    }\r\n                    className=\"gen-list-grid\"\r\n                    columnClassName=\"gen-list-col\"\r\n                >\r\n                    {rankedLists.map((rList) => (\r\n                        <RankedListCard onUpdate={props.onUpdate} rankedList={rList} key={\"r_\" + rList.dateCreated} />\r\n                    ))}\r\n                </Masonry>\r\n            </InfiniteScroll>\r\n            <ErrorSnack\r\n                message=\"Error Loading Lists\"\r\n                open={apiError}\r\n                handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n            />\r\n        </div>\r\n    ) : (\r\n        <h2 style={props.textTheme}>{props.emptyMessage}</h2>\r\n    );\r\n};\r\n\r\n// title: string\r\n// listType: string\r\n// userId: string\r\n// token: string\r\n// query: string\r\n// emptyMessage: string\r\n// listType: string\r\n// textTheme: object\r\n// noSort: bool\r\nexport const SortedListContainer = (props) => {\r\n    const [sort, setSort] = useState(getSort());\r\n    const [refresh, setRefresh] = useState(false);\r\n    const onSort = (sortOption) => {\r\n        saveSort(sortOption)\r\n        setSort(sortOption)\r\n    };\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"row\" style={{ alignItems: \"center\", justifyContent: \"space-around\" }}>\r\n                <div className=\"row\" style={{ alignItems: \"center\" }}>\r\n                    <h2 style={props.textTheme}>{props.title}</h2>\r\n                    <RefreshIcon\r\n                        style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\r\n                        onClick={() => setRefresh(!refresh)}\r\n                    />\r\n                </div>\r\n                {props.noSort ? <i style={{ display: \"none\" }} /> : <SortMenu onSort={onSort} />}\r\n            </div>\r\n            <GenericList\r\n                query={props.query}\r\n                textTheme={props.textTheme}\r\n                refresh={refresh}\r\n                onUpdate={() => setRefresh(!refresh)}\r\n                sort={sort}\r\n                userId={props.userId}\r\n                token={props.token}\r\n                emptyMessage={props.emptyMessage}\r\n                listType={props.listType}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction getParams(page = 1, sort = 0, userId = \"\", token = \"\", query = \"\", refresh = false, listType) {\r\n    return {\r\n        page: page,\r\n        sort: sort,\r\n        userId: userId,\r\n        token: token,\r\n        query: query,\r\n        refresh: refresh,\r\n        endpointBase: listType,\r\n    };\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, withStyles } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { resetUserContext, UserContext } from \"../Contexts\";\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport { RankedListEdit } from \"./RankedListEdit\";\r\nimport { createRankedList } from \"../api/RankedListRepo\";\r\nimport { LoadingDialog } from \"./LoadingDialog\";\r\nimport \"../App.css\";\r\n\r\nconst ListButton = withStyles((theme) => ({\r\n    root: {\r\n        padding: \"8px\",\r\n        color: theme.palette.getContrastText(appThemeConstants.paraPink),\r\n        backgroundColor: appThemeConstants.paraPink,\r\n        \"&:hover\": {\r\n            backgroundColor: appThemeConstants.paraPink,\r\n        },\r\n    },\r\n}))(Button);\r\n\r\nexport const NewListButton = () => {\r\n    const mainUser = useContext(UserContext);\r\n    const [createNew, setCreateNew] = useState(false);\r\n    const [saving, setSaving] = useState(false);\r\n    const [savedList, setSavedList] = useState(null);\r\n\r\n    const closeEdit = () => setCreateNew(false);\r\n\r\n    if (!mainUser.user) {\r\n        resetUserContext(mainUser);\r\n        return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ListButton variant=\"contained\" color=\"primary\" onClick={() => setCreateNew(true)}>\r\n                <div className=\"row\" style={{ alignItems: \"center\", justifyContent: \"space-evenly\", width: \"100px\" }}>\r\n                    <AddIcon />\r\n                    <h4 style={{ fontFamily: appThemeConstants.fontFamily, margin: \"0px\" }}>New List</h4>\r\n                </div>\r\n            </ListButton>\r\n\r\n            <RankedListEdit\r\n                open={createNew}\r\n                isNew={true}\r\n                mainUser={mainUser}\r\n                onClose={closeEdit}\r\n                onDelete={closeEdit}\r\n                onSave={(rankedList) => {\r\n                    setSavedList(rankedList);\r\n                    setSaving(true);\r\n                }}\r\n            />\r\n\r\n            <LoadingDialog\r\n                open={saving}\r\n                asyncTask={() => {\r\n                    if (savedList && savedList.rankItems.length >= 1) {\r\n                        return createRankedList(savedList, mainUser.userToken);\r\n                    }\r\n\r\n                    return [true, null];\r\n                }}\r\n                onClose={() => setSaving(false)}\r\n                errorMessage=\"Failed to Create List\"\r\n                successMessage=\"Created List!\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n// open: bool\r\n// isNew: bool\r\n// listId: string\r\n// mainUser: object\r\n// onClose: callback\r\n// onSave: callback\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useTheme } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { UserInfo } from \"./UserInfo\";\r\nimport { getUser } from \"../api/UserRepo\";\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { RankedListPreviewTypes } from \"../api/RankedListPreviewRepo\";\r\nimport { UserContext } from \"../Contexts\";\r\nimport { SortedListContainer } from \"./GenericList\";\r\nimport { NewListButton } from \"./NewListButton\";\r\nimport \"../App.css\";\r\n\r\n//isMain: bool\r\n// userId: int\r\n//userName: string\r\nexport const Profile = (props) => {\r\n    const [otherUser, setOtherUser] = useState(null);\r\n    const [errorState, setErrorState] = useState(false);\r\n    const [displayLiked, setDisplayLiked] = useState(false);\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const { userToken } = useContext(UserContext);\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (props.isMain || !props.userId) {\r\n                return;\r\n            }\r\n\r\n            const [e, userInfo] = await getUser(props.userId);\r\n            if (e) {\r\n                setErrorState(e);\r\n            } else {\r\n                setOtherUser(userInfo);\r\n            }\r\n        })();\r\n    }, [props.userId, props.isMain]);\r\n\r\n    if (props.isMain) {\r\n        return (\r\n            <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n                <NewListButton />\r\n\r\n                <UserInfo\r\n                    isMain={true}\r\n                    onListClick={() => setDisplayLiked(false)}\r\n                    onLikeClick={() => setDisplayLiked(true)}\r\n                />\r\n\r\n                <SortedListContainer\r\n                    textTheme={textTheme}\r\n                    title={(displayLiked ? \"Liked\" : \"Your\") + \" Lists\"}\r\n                    listType={displayLiked ? RankedListPreviewTypes.likedLists : RankedListPreviewTypes.userListsP}\r\n                    token={userToken}\r\n                    emptyMessage={\"You haven't \" + (displayLiked ? \"liked\" : \"created\") + \" any lists\"}\r\n                />\r\n            </div>\r\n        );\r\n    } else {\r\n        if (errorState) {\r\n            return <h2 style={getTextTheme(currentTheme)}>Error</h2>;\r\n        } else if (otherUser) {\r\n            return (\r\n                <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n                    <UserInfo isMain={false} user={otherUser} />\r\n                    <SortedListContainer\r\n                        userId={otherUser.userId}\r\n                        textTheme={textTheme}\r\n                        title={`${otherUser.username}'s Lists`}\r\n                        listType={RankedListPreviewTypes.userLists}\r\n                        emptyMessage={`${otherUser.username} hasn't made any lists`}\r\n                    />\r\n                </div>\r\n            );\r\n        } else {\r\n            return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n        }\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport { useTheme } from \"@material-ui/core\";\r\n\r\nimport { RankedListPreviewTypes } from \"../api/RankedListPreviewRepo\";\r\nimport { SortedListContainer } from \"./GenericList\";\r\nimport { getTextTheme } from \"../misc/AppTheme\";\r\nimport { NewListButton } from \"./NewListButton\";\r\nimport \"../App.css\";\r\n\r\nexport const Discover = () => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    return (\r\n        <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n            <NewListButton />\r\n            <SortedListContainer\r\n                title=\"Discover Lists\"\r\n                listType={RankedListPreviewTypes.discoverLists}\r\n                emptyMessage=\"No one's made any lists :(\"\r\n                textTheme={textTheme}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { useTheme } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport { resetUserContext, UserContext } from \"../Contexts\";\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { SortedListContainer } from \"./GenericList\";\r\nimport { RankedListPreviewTypes } from \"../api/RankedListPreviewRepo\";\r\nimport { NewListButton } from \"./NewListButton\";\r\nimport \"../App.css\";\r\n\r\nexport const Feed = () => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const mainUser = useContext(UserContext);\r\n    if (!mainUser.user) {\r\n        resetUserContext(mainUser);\r\n        return <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />;\r\n    }\r\n    const noFollowing = mainUser.user.numFollowing === 0;\r\n    return (\r\n        <div className=\"col\" style={{ alignItems: \"center\" }}>\r\n            <NewListButton />\r\n            {noFollowing ? (\r\n                <h2 style={textTheme}>Follow people to see their lists here</h2>\r\n            ) : (\r\n                <SortedListContainer\r\n                    noSort={true}\r\n                    title=\"Feed\"\r\n                    token={mainUser.userToken}\r\n                    listType={RankedListPreviewTypes.feedLists}\r\n                    emptyMessage=\"No lists posted in the last 24 hours\"\r\n                    textTheme={textTheme}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport { useTheme } from '@material-ui/core';\r\n\r\nimport { getTextTheme } from '../misc/AppTheme';\r\nimport { SortedListContainer } from './GenericList';\r\nimport { RankedListPreviewTypes } from '../api/RankedListPreviewRepo';\r\nimport \"../App.css\";\r\n\r\n// query: string\r\nexport const SearchLists = props => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    return (\r\n        <div className=\"col\" style={{alignItems: \"center\"}}>\r\n            <SortedListContainer\r\n                title={`Searching for lists \"${props.query}\"`}\r\n                listType={RankedListPreviewTypes.searchLists}\r\n                query={props.query}\r\n                emptyMessages=\"No lists found\"\r\n                textTheme={textTheme}\r\n            />\r\n        </div>\r\n    );\r\n};","import React, { useContext, useState } from \"react\";\r\nimport { Dialog, useTheme } from \"@material-ui/core\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nimport \"../App.css\";\r\nimport { BackButton } from \"./BackButton\";\r\nimport { appThemeConstants, getTextTheme } from \"../misc/AppTheme\";\r\nimport { PasswordField, passwordPattern } from \"./Login\";\r\nimport { ActionButton } from \"./ActionButton\";\r\nimport { changePassword, deleteUser } from \"../api/UserRepo\";\r\nimport { UserContext } from \"../Contexts\";\r\nimport { loginUser } from \"../api/Auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { clearStorage } from \"../misc/PrefStore\";\r\nimport { closeErrorSB, ErrorSnack } from \"./ErrorSnack\";\r\nimport { ProfilePicChooser } from \"./ProfPicChooser\";\r\n\r\n//<ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n\r\nexport const Settings = (props) => {\r\n    const currentTheme = useTheme();\r\n    const textTheme = getTextTheme(currentTheme);\r\n    const mainUser = useContext(UserContext);\r\n    const history = useHistory();\r\n\r\n    const [oldPassword, setOldPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [oldError, setOldError] = useState(false);\r\n    const [newError, setNewError] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [apiError, setApiError] = useState(false);\r\n    const [savedPassword, setSavedPassword] = useState(false);\r\n    const [profPickerOpen, setProfPickerOpen] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const resetPwdErrors = () => {\r\n        setOldError(false);\r\n        setNewError(false);\r\n    }\r\n\r\n    const validatePassword = async () => {\r\n        console.log(\"enter\");\r\n        const [e, res] = await loginUser(mainUser.user.username, oldPassword);\r\n        if (e) {\r\n            setOldError(true);\r\n            return false;\r\n        }\r\n\r\n        mainUser.setUserToken(res.jwtToken);\r\n        if (!newPassword.match(passwordPattern)) {\r\n            setNewError(true);\r\n            return false;\r\n        }\r\n\r\n        resetPwdErrors();\r\n\r\n        return true;\r\n    };\r\n\r\n    const trySaving = async () => {\r\n        setApiError(false);\r\n        setSavedPassword(false);\r\n        resetPwdErrors();\r\n        setLoading(true);\r\n        if (await validatePassword()) {\r\n            const [e, res] = await changePassword(newPassword, mainUser.userToken);\r\n            if (e) {\r\n                setApiError(e);\r\n                setErrorMessage(\"Error saving password\");\r\n            } else {\r\n                setOldPassword(\"\");\r\n                setNewPassword(\"\");\r\n                setSavedPassword(true);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={props.onClose} aria-labelledby=\"customized-dialog-title\" open={props.open}>\r\n            <div\r\n                className=\"col\"\r\n                style={{\r\n                    backgroundColor: currentTheme.palette.background.default,\r\n                    alignItems: \"center\",\r\n                    overscrollBehaviorY: \"none\",\r\n                }}\r\n            >\r\n                <div\r\n                    className=\"row\"\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        alignSelf: \"start\",\r\n                        width: \"fit-content\",\r\n                        maxWidth: \"100%\",\r\n                        position: \"sticky\",\r\n                        top: \"0\",\r\n                        zIndex: \"1\",\r\n                        backgroundColor: currentTheme.palette.background.default,\r\n                    }}\r\n                >\r\n                    <BackButton onClick={props.onClose} />\r\n                    <h1 style={{ ...textTheme, marginLeft: \"22px\", fontSize: \"22px\", marginRight: \"20px\" }}>\r\n                        Settings\r\n                    </h1>\r\n                </div>\r\n                <ActionButton label=\"Change Profile Picture\" width=\"320px\" onClick={() => setProfPickerOpen(true)} />\r\n                <ProfilePicChooser open={profPickerOpen} handleClose={() => setProfPickerOpen(false)} />\r\n                <h3 style={{ ...textTheme, alignSelf: \"start\", margin: \"0px\", marginLeft: \"18px\" }}>Change Password</h3>\r\n                <PasswordField\r\n                    label=\"Old Password\"\r\n                    errorMessage=\"Incorrect password\"\r\n                    error={oldError}\r\n                    onEnter={trySaving}\r\n                    onChange={(event) => setOldPassword(event.target.value)}\r\n                />\r\n                <PasswordField\r\n                    label=\"New Password\"\r\n                    error={newError}\r\n                    onEnter={trySaving}\r\n                    onChange={(event) => setNewPassword(event.target.value)}\r\n                />\r\n\r\n                {loading ? (\r\n                    <ReactLoading type=\"bars\" color={appThemeConstants.hanPurple} />\r\n                ) : (\r\n                    <div className=\"col\" style={{ width: \"100%\", alignItems: \"center\" }}>\r\n                        <ActionButton label=\"Save Password\" onClick={trySaving} />\r\n                        <ActionButton\r\n                            label=\"Delete User\"\r\n                            color=\"red\"\r\n                            onClick={async () => {\r\n                                setLoading(true);\r\n                                setApiError(false);\r\n                                const [e, res] = await deleteUser(mainUser.userToken);\r\n                                if (e) {\r\n                                    setApiError(e);\r\n                                    setErrorMessage(\"Error deleting account\");\r\n                                    setLoading(false);\r\n                                    return;\r\n                                }\r\n\r\n                                history.push(\"/auth\");\r\n                                clearStorage();\r\n                                setLoading(false);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                <ErrorSnack\r\n                    open={apiError}\r\n                    handleClose={(event, reason) => closeErrorSB(event, reason, setApiError)}\r\n                    message={errorMessage}\r\n                />\r\n\r\n                <ErrorSnack\r\n                    open={savedPassword}\r\n                    severity=\"success\"\r\n                    handleClose={(event, reason) => closeErrorSB(event, reason, setSavedPassword)}\r\n                    message=\"Saved Password!\"\r\n                />\r\n            </div>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    MenuItem,\r\n    Menu,\r\n    TextField,\r\n    Drawer,\r\n    makeStyles,\r\n    useTheme,\r\n    Toolbar,\r\n    ListItemText,\r\n    ListItemIcon,\r\n    ListItem,\r\n    List,\r\n    Switch as Sw,\r\n    Hidden,\r\n    IconButton,\r\n    AppBar,\r\n    FormControlLabel,\r\n    CssBaseline,\r\n} from \"@material-ui/core\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\nimport { ThemeContext } from \"../Contexts\";\r\nimport { clearStorage, getMainTab, saveTheme, setMainTab } from \"../misc/PrefStore\";\r\nimport { appThemeConstants } from \"../misc/AppTheme\";\r\nimport { Logo } from \"../components/Logo\";\r\nimport { Profile } from \"../components/Profile\";\r\nimport { SearchUsers } from \"../components/SearchUsers\";\r\nimport { Discover } from \"../components/Discover\";\r\nimport { Feed } from \"../components/Feed\";\r\nimport { SearchLists } from \"../components/SearchLists\";\r\nimport { Settings } from \"../components/Settings\";\r\nimport \"../App.css\";\r\n\r\n\r\nconst renderOtherProfile = (routerProps) => {\r\n    let userId = routerProps.match.params.userId;\r\n    return <Profile userId={userId} isMain={false} />;\r\n};\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    menuButton: {\r\n        color: theme.palette.text.primary,\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    content: {\r\n        width: \"100%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    listItem: {\r\n        width: \"95%\",\r\n        borderRadius: \"15px\",\r\n        marginLeft: \"8px\",\r\n        marginTop: \"4px\",\r\n    },\r\n}));\r\n\r\nlet searchQuery = \"\";\r\n\r\nexport const MainRoute = (props) => {\r\n    const { window } = props;\r\n    const currentTheme = useTheme();\r\n    //const { user } = useContext(UserContext);\r\n    const { setTheme } = useContext(ThemeContext);\r\n    const container = window !== undefined ? () => window().document.body : undefined;\r\n    const [mobileOpen, setMobileOpen] = useState(false);\r\n    const [tabIndex, setTabIndex] = useState(getMainTab());\r\n    const [themeSwitch, setThemeSwitch] = useState(currentTheme.palette.type);\r\n    const [searchLists, setSearchLists] = useState(true);\r\n    const [menuAnchor, setMenuAnchor] = useState(null);\r\n    const [settings, openSettings] = useState(false);\r\n\r\n    const searchItemClicked = (listSelected) => {\r\n        setSearchLists(listSelected);\r\n        setMenuAnchor(null);\r\n    };\r\n\r\n    const history = useHistory();\r\n\r\n    const onThemeChange = () => {\r\n        const newTheme = themeSwitch === \"dark\" ? \"light\" : \"dark\";\r\n        setThemeSwitch(newTheme);\r\n        setTheme(newTheme);\r\n        saveTheme(newTheme);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    const selectedColor =\r\n        currentTheme.palette.type === \"light\" ? appThemeConstants.palePurple : appThemeConstants.hanPurple;\r\n    const unselectedColor = currentTheme.palette.background.default;\r\n    const linkStyle = {\r\n        textDecoration: \"none\",\r\n        color: currentTheme.palette.text.primary,\r\n    };\r\n    const iconColor = {\r\n        color: currentTheme.palette.type === \"dark\" ? appThemeConstants.lavender : appThemeConstants.hanPurple,\r\n    };\r\n    const handleDrawerToggle = () => setMobileOpen(!mobileOpen);\r\n    const drawer = (\r\n        <div className=\"col\" style={{ width: \"100%\" }}>\r\n            <Logo />\r\n            <List style={{ marginTop: \"10px\" }}>\r\n                <Link to=\"/main\" style={linkStyle}>\r\n                    <ListItem\r\n                        className={classes.listItem}\r\n                        button\r\n                        key=\"feed\"\r\n                        onClick={() => {\r\n                            setTabIndex(0);\r\n                            setMainTab(0);\r\n                        }}\r\n                        style={{ backgroundColor: tabIndex === 0 ? selectedColor : unselectedColor }}\r\n                    >\r\n                        <ListItemIcon>{<ListIcon style={iconColor} />}</ListItemIcon>\r\n                        <ListItemText primary={\"Feed\"} />\r\n                    </ListItem>\r\n                </Link>\r\n                <Link to=\"/main/discover\" style={linkStyle}>\r\n                    <ListItem\r\n                        className={classes.listItem}\r\n                        button\r\n                        key=\"discover\"\r\n                        onClick={() => {\r\n                            setTabIndex(1);\r\n                            setMainTab(1);\r\n                        }}\r\n                        style={{ backgroundColor: tabIndex === 1 ? selectedColor : unselectedColor }}\r\n                    >\r\n                        <ListItemIcon>{<ExploreIcon style={iconColor} />}</ListItemIcon>\r\n                        <ListItemText primary={\"Discover\"} />\r\n                    </ListItem>\r\n                </Link>\r\n                <Link to=\"/main/profile\" style={linkStyle}>\r\n                    <ListItem\r\n                        className={classes.listItem}\r\n                        button\r\n                        key=\"profile\"\r\n                        onClick={() => {\r\n                            setTabIndex(2);\r\n                            setMainTab(2);\r\n                        }}\r\n                        style={{ backgroundColor: tabIndex === 2 ? selectedColor : unselectedColor }}\r\n                    >\r\n                        <ListItemIcon>{<AccountCircleIcon style={iconColor} />}</ListItemIcon>\r\n                        <ListItemText primary={\"Profile\"} />\r\n                    </ListItem>\r\n                </Link>\r\n            </List>\r\n\r\n            <div className=\"col\" style={{ position: \"absolute\", bottom: 0, width: \"100%\" }}>\r\n                <ListItem button key=\"themechange\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Sw\r\n                                checked={themeSwitch === \"dark\"}\r\n                                onChange={onThemeChange}\r\n                                name=\"themeSwitch\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Dark Mode\"\r\n                    />\r\n                </ListItem>\r\n                <ListItem button key=\"settings\" onClick={() => openSettings(true)}>\r\n                    <ListItemIcon>{<SettingsIcon style={iconColor} />}</ListItemIcon>\r\n                    <ListItemText primary={\"Settings\"} />\r\n                </ListItem>\r\n                <Link to=\"/auth\" style={linkStyle} onClick={() => clearStorage()}>\r\n                    <ListItem button key=\"logout\">\r\n                        <ListItemIcon>{<ExitToAppIcon style={iconColor} />}</ListItemIcon>\r\n                        <ListItemText primary={\"Log Out\"} />\r\n                    </ListItem>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appBar}\r\n                style={{ backgroundColor: currentTheme.palette.background.default, boxShadow: currentTheme.shadows[0] }}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            width: \"90%\",\r\n                            alignSelf: \"center\",\r\n                            justifySelf: \"center\",\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            style={{ width: \"550px\", maxWidth: \"50%\", margin: \"12px\" }}\r\n                            variant=\"outlined\"\r\n                            placeholder=\"Search...\"\r\n                            onKeyPress={(event) => {\r\n                                if (event.key === \"Enter\") {\r\n                                    history.push(\r\n                                        `/main/${searchLists ? \"search_lists\" : \"search_users\"}/${searchQuery}`\r\n                                    );\r\n                                    event.preventDefault();\r\n                                }\r\n                            }}\r\n                            onChange={(event) => (searchQuery = event.target.value)}\r\n                        />\r\n                        <Button\r\n                            style={{ height: \"fit-content\", fontFamily: appThemeConstants.fontFamily }}\r\n                            onClick={(event) => setMenuAnchor(event.currentTarget)}\r\n                        >\r\n                            {searchLists ? \"Lists\" : \"Users\"}\r\n                        </Button>\r\n                        <Menu\r\n                            id=\"simple-menu\"\r\n                            anchorEl={menuAnchor}\r\n                            keepMounted\r\n                            open={Boolean(menuAnchor)}\r\n                            onClose={() => setMenuAnchor(null)}\r\n                        >\r\n                            <MenuItem onClick={() => searchItemClicked(true)}>Lists</MenuItem>\r\n                            <MenuItem onClick={() => searchItemClicked(false)}>Users</MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor=\"left\"\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: false,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                <Settings open={settings} onClose={() => openSettings(false)} />\r\n                <Switch>\r\n                    <Route path=\"/main\" component={Feed} exact />\r\n                    <Route path=\"/main/discover\" component={Discover} />\r\n                    <Route\r\n                        path=\"/main/search_users/:query\"\r\n                        render={(routerProps) => {\r\n                            return <SearchUsers query={routerProps.match.params.query} />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        path=\"/main/search_lists/:query\"\r\n                        render={(routerProps) => {\r\n                            return <SearchLists query={routerProps.match.params.query} />;\r\n                        }}\r\n                    />\r\n                    <Route path=\"/main/profile\" render={() => <Profile isMain={true} />} exact />\r\n                    <Route path=\"/main/profile/:userId\" render={(routerProps) => renderOtherProfile(routerProps)} />\r\n                </Switch>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useReducer, useMemo, useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport { UserContext, ThemeContext } from \"./Contexts\";\nimport { userReducer } from \"./reducers/UserReducer\";\nimport { getCurrentTheme, getToken } from \"./misc/PrefStore\";\nimport { appThemeConstants } from \"./misc/AppTheme\";\nimport { Splash } from \"./routes/Splash\";\nimport { LoginSignUp } from \"./routes/LoginSignup\";\nimport { MainRoute } from \"./routes/MainRoute\";\nimport \"./App.css\";\n\nconst appThemeLight = {\n    palette: {\n        type: \"light\",\n        primary: {\n            main: appThemeConstants.hanPurple,\n            light: appThemeConstants.palePurple,\n            dark: appThemeConstants.lavender,\n        },\n        secondary: {\n            main: appThemeConstants.paraPink,\n            dark: appThemeConstants.darkSienna,\n        },\n    },\n};\n\nconst appThemeDark = {\n    palette: {\n        ...appThemeLight.palette,\n        type: \"dark\",\n        primary: {\n            ...appThemeLight.palette.primary,\n            main: appThemeConstants.lavender,\n        },\n        secondary: {\n            ...appThemeLight.palette.secondary,\n            dark: appThemeConstants.palePurple,\n        },\n    },\n};\n\nconst App = () => {\n    const [user, userDispatch] = useReducer(userReducer, null);\n    const [userToken, setUserToken] = useState(getToken());\n    const [theme, setTheme] = useState(getCurrentTheme());\n\n    const userValue = useMemo(() => ({ user, userDispatch, userToken, setUserToken }), [\n        user,\n        userDispatch,\n        userToken,\n        setUserToken,\n    ]);\n    const themeValue = useMemo(() => ({ theme, setTheme }), [theme, setTheme]);\n\n    const darkTheme = createMuiTheme(appThemeDark);\n    const lightTheme = createMuiTheme(appThemeLight);\n\n    return (\n        <div className=\"App\">\n            <ThemeContext.Provider value={themeValue}>\n                <UserContext.Provider value={userValue}>\n                    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n                        <Switch>\n                            <Route path=\"/\" component={Splash} exact />\n                            <Route path=\"/auth\" component={LoginSignUp} />\n                            <Route path=\"/main\" component={MainRoute} />\n                        </Switch>\n                    </ThemeProvider>\n                </UserContext.Provider>\n            </ThemeContext.Provider>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}